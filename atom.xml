<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>听雨小筑</title>
  
  <subtitle>爱学习，有梦想，实力派</subtitle>
  <link href="https://blog.kbiao.me/atom.xml" rel="self"/>
  
  <link href="https://blog.kbiao.me/"/>
  <updated>2022-05-03T13:12:14.958Z</updated>
  <id>https://blog.kbiao.me/</id>
  
  <author>
    <name>K、Biao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【译】20个 Laravel Eloquent 小技巧（下）</title>
    <link href="https://blog.kbiao.me/20-Laravel-Eloquent-Tips-and-Tricks-part2/"/>
    <id>https://blog.kbiao.me/20-Laravel-Eloquent-Tips-and-Tricks-part2/</id>
    <published>2019-01-05T09:50:41.000Z</published>
    <updated>2022-05-03T13:12:14.958Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.kbiao.me/2019-01-03-15465238831311.png"></p><blockquote></blockquote><p><a href="http://blog.kbiao.me/2019/01/03/20-Laravel-Eloquent-Tips-and-Tricks/">书接上文</a>。</p><p>继续介绍 Laravel Eloquent 的小技巧</p><span id="more"></span><h3 id="11-自定义属性排序"><a href="#11-自定义属性排序" class="headerlink" title="11. 自定义属性排序"></a>11. 自定义属性排序</h3><p> 假设你有下面的一段代码：</p><p> （设定了一个在返回对象时候的附加属性 ‘full_name’参见 tips5 模型属性: 时间戳, 附加属性（appends） 等）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullNameAttribute</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;attributes[<span class="string">&#x27;first_name&#x27;</span>] . <span class="string">&#x27; &#x27;</span> . <span class="variable language_">$this</span>-&gt;attributes[<span class="string">&#x27;last_name&#x27;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你想要按照 <code>full_name</code> 来排序的话？下面的代码是不行的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$clients</span> = <span class="title class_">Client</span>::<span class="title function_ invoke__">orderBy</span>(<span class="string">&#x27;full_name&#x27;</span>)-&gt;<span class="title function_ invoke__">get</span>(); <span class="comment">//不行滴</span></span><br></pre></td></tr></table></figure><p>当然解决方案也是非常简单。<br>我们需要在得到结果以后再对他们进行排序。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable">$clients</span> = <span class="title class_">Client</span>::<span class="title function_ invoke__">get</span>()-&gt;<span class="title function_ invoke__">sortBy</span>(<span class="string">&#x27;full_name&#x27;</span>); <span class="comment">//稳了</span></span><br></pre></td></tr></table></figure><p>注意两个方法名字是不一样的——不是 <code>orderBy</code> 而是 <code>sortBy</code>。</p><p>（一个是 SQL 语句，自定义属性是数据库没有的字段当然不能直接用。但是查询的返回都是一个 Collection 对象，Laravel 为集合提供了很多方便的操作方法，sortBy 就是其中一个，当然还可以用 filter 等集合操作）</p><h3 id="12-全局范围（global-scope）内的默认排序"><a href="#12-全局范围（global-scope）内的默认排序" class="headerlink" title="12. 全局范围（global scope）内的默认排序"></a>12. 全局范围（global scope）内的默认排序</h3><p>如果你希望User :: all（）始终按名称字段排序，该怎么办？ 你可以分配全局的查询作用域。 让我们回到上面已经提到的boot（）方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">parent</span>::<span class="title function_ invoke__">boot</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认按照name 字段升序</span></span><br><span class="line">    <span class="built_in">static</span>::<span class="title function_ invoke__">addGlobalScope</span>(<span class="string">&#x27;order&#x27;</span>, function (Builder <span class="variable">$builder</span>) &#123;</span><br><span class="line">        <span class="variable">$builder</span>-&gt;<span class="title function_ invoke__">orderBy</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;asc&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://laravel.com/docs/5.6/eloquent#query-scopes">这里</a>还有更多关于请求范围作用域的介绍。</p><h3 id="13-原生查询方法"><a href="#13-原生查询方法" class="headerlink" title="13. 原生查询方法"></a>13. 原生查询方法</h3><p>有时我们需要在Eloquent语句中添加原生查询语句。 幸运的是，它提供了这样的功能。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原生 where 语句</span></span><br><span class="line"><span class="variable">$orders</span> = DB::<span class="title function_ invoke__">table</span>(<span class="string">&#x27;orders&#x27;</span>)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">whereRaw</span>(<span class="string">&#x27;price &gt; IF(state = &quot;TX&quot;, ?, 100)&#x27;</span>, [<span class="number">200</span>])</span><br><span class="line">    -&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原生 having 语句</span></span><br><span class="line"><span class="title class_">Product</span>::<span class="title function_ invoke__">groupBy</span>(<span class="string">&#x27;category_id&#x27;</span>)-&gt;<span class="title function_ invoke__">havingRaw</span>(<span class="string">&#x27;COUNT(*) &gt; 1&#x27;</span>)-&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原生 orderBy 语句</span></span><br><span class="line"><span class="title class_">User</span>::<span class="title function_ invoke__">where</span>(<span class="string">&#x27;created_at&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;2016-01-01&#x27;</span>)</span><br><span class="line">  -&gt;<span class="title function_ invoke__">orderByRaw</span>(<span class="string">&#x27;(updated_at - created_at) desc&#x27;</span>)</span><br><span class="line">  -&gt;<span class="title function_ invoke__">get</span>();</span><br></pre></td></tr></table></figure><p>（本质上Eloquent就是对 DB 查询对象的一个封装，所以可以用在 DB 上的原始查询方法，都可以用在继承自 Eloquent 的 model 对象上。）</p><h3 id="14-复制：-得到一行数据的一个副本"><a href="#14-复制：-得到一行数据的一个副本" class="headerlink" title="14. 复制： 得到一行数据的一个副本"></a>14. 复制： 得到一行数据的一个副本</h3><p>很简单的一条，不需要太多解释。这是生成数据库条目副本的最佳手段。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$task</span> = <span class="title class_">Tasks</span>::<span class="title function_ invoke__">find</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$newTask</span> = <span class="variable">$task</span>-&gt;<span class="title function_ invoke__">replicate</span>();</span><br><span class="line"><span class="variable">$newTask</span>-&gt;<span class="title function_ invoke__">save</span>();</span><br></pre></td></tr></table></figure><h3 id="15-用于大表大集合的-Chunk（）方法"><a href="#15-用于大表大集合的-Chunk（）方法" class="headerlink" title="15. 用于大表大集合的 Chunk（）方法"></a>15. 用于大表大集合的 Chunk（）方法</h3><p>不完全与Eloquent相关，它更多是Collection 集合类提供的方法，但仍然很强大 —— 处理更大的数据集，你可以将它们分成几块。 </p><p>不要这么做：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$users</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">all</span>();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$users</span> <span class="keyword">as</span> <span class="variable">$user</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>而是这样：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>::<span class="title function_ invoke__">chunk</span>(<span class="number">100</span>, function (<span class="variable">$users</span>) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$users</span> <span class="keyword">as</span> <span class="variable">$user</span>) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>类似于数据分片，减少占用提升性能</p></blockquote><h3 id="16-在生成模型的时候再额外生成一些模板"><a href="#16-在生成模型的时候再额外生成一些模板" class="headerlink" title="16. 在生成模型的时候再额外生成一些模板"></a>16. 在生成模型的时候再额外生成一些模板</h3><p>我们都知道这个的 Artisan 的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:model Company</span><br></pre></td></tr></table></figure><p>但你是否知道它还有三个很有用的参数标记用来生成与这个模型关联的其他文件？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:model Company -mcr</span><br></pre></td></tr></table></figure><ul><li>-m 将会创建模型的迁移（migration）文件</li><li>-c 将会创建控制器（contriller）</li><li>-r 将表用这个控制器应该是一个资源控制器 （resourceful）</li></ul><h3 id="17-在保存的时候重写-update-at-字段"><a href="#17-在保存的时候重写-update-at-字段" class="headerlink" title="17. 在保存的时候重写 update_at 字段"></a>17. 在保存的时候重写 update_at 字段</h3><p>你知道 - &gt; save（）方法是可以接受参数的吗？ 因此，我们可以告诉它“忽略” updated_at默认填充当前时间戳的功能。 看这个例子： </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$product</span> = <span class="title class_">Product</span>::<span class="title function_ invoke__">find</span>(<span class="variable">$id</span>);</span><br><span class="line"><span class="variable">$product</span>-&gt;updated_at = <span class="string">&#x27;2019-01-01 10:00:00&#x27;</span>;</span><br><span class="line"><span class="variable">$product</span>-&gt;<span class="title function_ invoke__">save</span>([<span class="string">&#x27;timestamps&#x27;</span> =&gt; <span class="literal">false</span>]);</span><br></pre></td></tr></table></figure><p>这里我们动态的重写的 <code>update_at</code> 字段，而不是预先在模型中定义。</p><blockquote><p>Laravel 默认会给所有实体类配置时间戳，如果不需要一般是在模型中指定 <code>$timestamps = false</code></p></blockquote><h3 id="18-update（）方法的返回值是什么？"><a href="#18-update（）方法的返回值是什么？" class="headerlink" title="18. update（）方法的返回值是什么？"></a>18. update（）方法的返回值是什么？</h3><p>你有没有曾想过下面这段代码返回的 result 是什么？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$result</span> = <span class="variable">$products</span>-&gt;<span class="title function_ invoke__">whereNull</span>(<span class="string">&#x27;category_id&#x27;</span>)-&gt;<span class="title function_ invoke__">update</span>([<span class="string">&#x27;category_id&#x27;</span> =&gt; <span class="number">2</span>]);</span><br></pre></td></tr></table></figure><p>我的意思是，更新语句是在数据库中正确执行的，但 $ result 变量会包含什么？</p><p>答案是受影响的行。 因此，如果您需要检查受影响的行数，则无需再调用任何其他方法 -  update（）方法将为你返回这个数字。</p><h3 id="19-正确翻译-SQL-语句中的括号-到-Eloquent-的查询"><a href="#19-正确翻译-SQL-语句中的括号-到-Eloquent-的查询" class="headerlink" title="19. 正确翻译 SQL 语句中的括号 到 Eloquent 的查询"></a>19. 正确翻译 SQL 语句中的括号 到 Eloquent 的查询</h3><p>假设在你的 SQL 查询中 包含了 and &#x2F; or 这样的关键字，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">... <span class="keyword">WHERE</span> (gender <span class="operator">=</span> <span class="string">&#x27;Male&#x27;</span> <span class="keyword">and</span> age <span class="operator">&gt;=</span> <span class="number">18</span>) <span class="keyword">or</span> (gender <span class="operator">=</span> <span class="string">&#x27;Female&#x27;</span> <span class="keyword">and</span> age <span class="operator">&gt;=</span> <span class="number">65</span>)</span><br></pre></td></tr></table></figure><p>怎么翻译成 Eloquent的查询呢？ 这是错误的方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$q</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;Male&#x27;</span>);</span><br><span class="line"><span class="variable">$q</span>-&gt;<span class="title function_ invoke__">orWhere</span>(<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;&gt;=&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable">$q</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;Female&#x27;</span>);</span><br><span class="line"><span class="variable">$q</span>-&gt;<span class="title function_ invoke__">orWhere</span>(<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;&gt;=&#x27;</span>, <span class="number">65</span>);</span><br></pre></td></tr></table></figure><p>这个顺序是有问题的。正确的方法稍微有些复杂，需要用到闭包函数作为子查询：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$q</span>-&gt;<span class="title function_ invoke__">where</span>(function (<span class="variable">$query</span>) &#123;</span><br><span class="line">    <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;Male&#x27;</span>)</span><br><span class="line">        -&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;&gt;=&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">&#125;)-&gt;<span class="title function_ invoke__">orWhere</span>(function(<span class="variable">$query</span>) &#123;</span><br><span class="line">    <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;Female&#x27;</span>)</span><br><span class="line">        -&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;&gt;=&#x27;</span>, <span class="number">65</span>); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="20-orWhere方法使用更多参数"><a href="#20-orWhere方法使用更多参数" class="headerlink" title="20 orWhere方法使用更多参数"></a>20 orWhere方法使用更多参数</h3><p>最后一条，你可以个 orWhere 方法传递一个数组。</p><p>常规用法是：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$q</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$q</span>-&gt;<span class="title function_ invoke__">orWhere</span>(<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable">$q</span>-&gt;<span class="title function_ invoke__">orWhere</span>(<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>你也可以用下面的语句实现一样的功能：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$q</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$q</span>-&gt;<span class="title function_ invoke__">orWhere</span>([<span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span> =&gt; <span class="number">3</span>]);</span><br></pre></td></tr></table></figure><h3 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h3><ul><li><a href="https://laravel-news.com/eloquent-tips-tricks">《20 Laravel Eloquent Tips and Tricks》</a><a href="https://laravel-news.com/eloquent-tips-tricks">https://laravel-news.com/eloquent-tips-tricks</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.kbiao.me/2019-01-03-15465238831311.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.kbiao.me/2019/01/03/20-Laravel-Eloquent-Tips-and-Tricks/&quot;&gt;书接上文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;继续介绍 Laravel Eloquent 的小技巧&lt;/p&gt;</summary>
    
    
    
    <category term="全干工程师的收藏夹" scheme="https://blog.kbiao.me/categories/%E5%85%A8%E5%B9%B2%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E6%94%B6%E8%97%8F%E5%A4%B9/"/>
    
    
    <category term="php" scheme="https://blog.kbiao.me/tags/php/"/>
    
    <category term="laravel" scheme="https://blog.kbiao.me/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>【译】20个 Laravel Eloquent 小技巧（上）</title>
    <link href="https://blog.kbiao.me/20-Laravel-Eloquent-Tips-and-Tricks/"/>
    <id>https://blog.kbiao.me/20-Laravel-Eloquent-Tips-and-Tricks/</id>
    <published>2019-01-03T10:50:41.000Z</published>
    <updated>2022-05-03T13:12:12.076Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.kbiao.me/2019-01-03-15465238831311.png"></p><blockquote><p>腾讯实习的项目按照公司的主流技术选型是PHP 流派的，而我习惯了 JAVA 的体系面对这个最好的语言还是挺不适应的。特别是很多写法用法以及框架知识不在文档中，语法又及其灵活就产生和每次看别人的代码都有种woc 还能这么写的感觉。所以遵循语言的编程范式，总结理解一些小技巧也是很有必要的。下面是翻译自 Laravel-News 的一篇教程，总结了 Laravel 的对象关系映射框架（ORM）的几个小技巧。</p></blockquote><span id="more"></span><p>Eloquent ORM 在其表面简单易用的机制背后，还有很多半隐藏的功能或者少有人知的方法来实现一些很有用的需求。 在本文中，我将向您展示一些技巧。</p><h3 id="1-增量和减少"><a href="#1-增量和减少" class="headerlink" title="1. 增量和减少"></a>1. 增量和减少</h3><p>如果你平时是这么做的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$article</span> = <span class="title class_">Article</span>::<span class="title function_ invoke__">find</span>(<span class="variable">$article_id</span>);</span><br><span class="line"><span class="variable">$article</span>-&gt;read_count++;</span><br><span class="line"><span class="variable">$article</span>-&gt;<span class="title function_ invoke__">save</span>();</span><br></pre></td></tr></table></figure><p>那么你可以试试这样：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$article</span> = <span class="title class_">Article</span>::<span class="title function_ invoke__">find</span>(<span class="variable">$article_id</span>);</span><br><span class="line"><span class="variable">$article</span>-&gt;<span class="title function_ invoke__">increment</span>(<span class="string">&#x27;read_count&#x27;</span>);</span><br></pre></td></tr></table></figure><p>或者这样也是可以的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Article</span>::<span class="title function_ invoke__">find</span>(<span class="variable">$article_id</span>)-&gt;<span class="title function_ invoke__">increment</span>(<span class="string">&#x27;read_count&#x27;</span>);</span><br><span class="line"><span class="title class_">Article</span>::<span class="title function_ invoke__">find</span>(<span class="variable">$article_id</span>)-&gt;<span class="title function_ invoke__">increment</span>(<span class="string">&#x27;read_count&#x27;</span>, <span class="number">10</span>); <span class="comment">// +10</span></span><br><span class="line"><span class="title class_">Product</span>::<span class="title function_ invoke__">find</span>(<span class="variable">$produce_id</span>)-&gt;<span class="title function_ invoke__">decrement</span>(<span class="string">&#x27;stock&#x27;</span>); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h3 id="2-XorY-方法"><a href="#2-XorY-方法" class="headerlink" title="2. XorY 方法"></a>2. XorY 方法</h3><p>Eloquent有很多方法是两个方法的组合，实现 “请做X，否则做Y”这样的需求。</p><p><strong>例 1</strong> findOrFail():</p><p>可以把这样的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">find</span>(<span class="variable">$id</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$user</span>) &#123; <span class="title function_ invoke__">abort</span> (<span class="number">404</span>); &#125;</span><br></pre></td></tr></table></figure><p>换成这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$user = User::findOrFail($id);</span><br></pre></td></tr></table></figure><p><strong>例 2</strong> firstOrCreate():</p><p>不需要写这么长：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$user = User::where(&#x27;email&#x27;, $email)-&gt;first();</span><br><span class="line">if (!$user) &#123;</span><br><span class="line">  User::create([</span><br><span class="line">    &#x27;email&#x27; =&gt; $email</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就够了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$user = User::firstOrCreate([&#x27;email&#x27; =&gt; $email]);</span><br></pre></td></tr></table></figure><h3 id="3-模型的-boot-方法"><a href="#3-模型的-boot-方法" class="headerlink" title="3. 模型的 boot() 方法"></a>3. 模型的 boot() 方法</h3><p>在Eloquent模型中有一个名为boot（）的神奇地方，您可以在其中覆盖默认行为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">boot</span>();</span><br><span class="line">        <span class="built_in">static</span>::<span class="title function_ invoke__">updating</span>(function(<span class="variable">$model</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 记录一些日志</span></span><br><span class="line">            <span class="comment">// 覆盖或者重写一些属性 比如$model-&gt;something = transform($something);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能最常见的例子之一是在创建模型对象时设置一些字段值。比方说你需要在创建对象时候生成UUID字段。</p><h3 id="4-带条件以及排序的关联关系模型"><a href="#4-带条件以及排序的关联关系模型" class="headerlink" title="4. 带条件以及排序的关联关系模型"></a>4. 带条件以及排序的关联关系模型</h3><p>通常定义关系模型的方法是这样的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">users</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">hasMany</span>(<span class="string">&#x27;App\User&#x27;</span>);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但你是否知道在定义关系模型的时候就已经可以增加 where 或者 orderBy 的条件了？ 比如说你需要定义一个特定类型的用户的关联关系并且用邮箱信息来排序，那你可以这么做：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">approvedUsers</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">hasMany</span>(<span class="string">&#x27;App\User&#x27;</span>)-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;approved&#x27;</span>, <span class="number">1</span>)-&gt;<span class="title function_ invoke__">orderBy</span>(<span class="string">&#x27;email&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-模型属性-时间戳-附加属性（appends）-等"><a href="#5-模型属性-时间戳-附加属性（appends）-等" class="headerlink" title="5. 模型属性: 时间戳, 附加属性（appends） 等"></a>5. 模型属性: 时间戳, 附加属性（appends） 等</h3><p>Eloquent模型有一些“参数”，会以该类的属性形式出现。 最常用的可能是这些：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$table</span> = <span class="string">&#x27;users&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$fillable</span> = [<span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;password&#x27;</span>]; <span class="comment">// 这些字段可以在模型的 create 方法中直接创建</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$dates</span> = [<span class="string">&#x27;created_at&#x27;</span>, <span class="string">&#x27;deleted_at&#x27;</span>]; <span class="comment">// 这些字段将会转换成 Carbon类型的，可以方便的使用 Carbon 提供的时间方法</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$appends</span> = [<span class="string">&#x27;field1&#x27;</span>, <span class="string">&#x27;field2&#x27;</span>]; <span class="comment">// 序列化时候附加的额外属性，通过模型中定义 getXXXAttribute 的方式来定义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可不仅仅有这些，还有：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="variable">$primaryKey</span> = <span class="string">&#x27;uuid&#x27;</span>; <span class="comment">// 模型的主键名称可以不是默认的 id</span></span><br><span class="line"><span class="keyword">public</span> <span class="variable">$incrementing</span> = <span class="literal">false</span>; <span class="comment">// 甚至可以不必是自增的类型!</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$perPage</span> = <span class="number">25</span>; <span class="comment">// 是的，你还定义模型集合分页参数(默认是 15)</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CREATED_AT</span> = <span class="string">&#x27;created_at&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">UPDATED_AT</span> = <span class="string">&#x27;updated_at&#x27;</span>; <span class="comment">// 默认的时间戳字段也是可以改变的</span></span><br><span class="line"><span class="keyword">public</span> <span class="variable">$timestamps</span> = <span class="literal">false</span>; <span class="comment">// 或者完全不用他</span></span><br></pre></td></tr></table></figure><p>甚至还有更多，我仅仅列出了最有意思的一部分，更多请查看默认<a href="https://github.com/laravel/framework/blob/5.6/src/Illuminate/Database/Eloquent/Model.php">抽象Model类</a>的代码，并查看所有使用的trait 方法。</p><h3 id="6-查询多个实体对象"><a href="#6-查询多个实体对象" class="headerlink" title="6. 查询多个实体对象"></a>6. 查询多个实体对象</h3><p>find（）方法想必大家都知道的吧？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">find</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>我很惊讶很少有人知道它可以接受多个ID作为数组：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$users</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">find</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br></pre></td></tr></table></figure><h3 id="7-WhereX"><a href="#7-WhereX" class="headerlink" title="7. WhereX"></a>7. WhereX</h3><p> 有一种很优雅的方式可以把下面的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$users</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">where</span>(<span class="string">&#x27;approved&#x27;</span>, <span class="number">1</span>)-&gt;<span class="title function_ invoke__">get</span>();</span><br></pre></td></tr></table></figure><p>改成这样：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$users</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">whereApproved</span>(<span class="number">1</span>)-&gt;<span class="title function_ invoke__">get</span>(); </span><br></pre></td></tr></table></figure><p>是的，你也可以改成任何字段的名称，并将其作为后缀附加到“where”，它将神奇的产生预想的效果（通过<em>魔术方法</em>实现调用）。</p><p>此外，Eloquent中还有一些与日期&#x2F;时间相关的预定义方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title class_">User</span>::<span class="title function_ invoke__">whereDate</span>(<span class="string">&#x27;created_at&#x27;</span>, <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d&#x27;</span>));</span><br><span class="line"><span class="title class_">User</span>::<span class="title function_ invoke__">whereDay</span>(<span class="string">&#x27;created_at&#x27;</span>, <span class="title function_ invoke__">date</span>(<span class="string">&#x27;d&#x27;</span>));</span><br><span class="line"><span class="title class_">User</span>::<span class="title function_ invoke__">whereMonth</span>(<span class="string">&#x27;created_at&#x27;</span>, <span class="title function_ invoke__">date</span>(<span class="string">&#x27;m&#x27;</span>));</span><br><span class="line"><span class="title class_">User</span>::<span class="title function_ invoke__">whereYear</span>(<span class="string">&#x27;created_at&#x27;</span>, <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y&#x27;</span>));</span><br></pre></td></tr></table></figure><h3 id="8-使用关系模型字段排序"><a href="#8-使用关系模型字段排序" class="headerlink" title="8. 使用关系模型字段排序"></a>8. 使用关系模型字段排序</h3><p>一个更复杂的“技巧”。 如果你有帖子，但要通过最新帖子对它们进行排序？ 顶部有最新更新主题的论坛中非常常见的要求，对吧？</p><p>首先，定义关于该主题的最新帖子的关系：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">latestPost</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">hasOne</span>(<span class="title class_">\App\Post</span>::<span class="variable language_">class</span>)-&gt;<span class="title function_ invoke__">latest</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来可以在我们的控制器中用这个神奇的方法来实现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$users</span> = <span class="title class_">Topic</span>::<span class="title function_ invoke__">with</span>(<span class="string">&#x27;latestPost&#x27;</span>)-&gt;<span class="title function_ invoke__">get</span>()-&gt;<span class="title function_ invoke__">sortByDesc</span>(<span class="string">&#x27;latestPost.created_at&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="9-Eloquent-when-–-不用再写-if-else-啦"><a href="#9-Eloquent-when-–-不用再写-if-else-啦" class="headerlink" title="9. Eloquent::when() – 不用再写 if -else 啦"></a>9. Eloquent::when() – 不用再写 if -else 啦</h3><p>大部分时候我们用 if-else 来实现按条件查询，类似这样的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">request</span>(<span class="string">&#x27;filter_by&#x27;</span>) == <span class="string">&#x27;likes&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;likes&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="title function_ invoke__">request</span>(<span class="string">&#x27;likes_amount&#x27;</span>, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">request</span>(<span class="string">&#x27;filter_by&#x27;</span>) == <span class="string">&#x27;date&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">orderBy</span>(<span class="string">&#x27;created_at&#x27;</span>, <span class="title function_ invoke__">request</span>(<span class="string">&#x27;ordering_rule&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是一个更好的方法是——使用 when（）方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="title class_">Author</span>::<span class="title function_ invoke__">query</span>();</span><br><span class="line"><span class="variable">$query</span>-&gt;<span class="title function_ invoke__">when</span>(<span class="title function_ invoke__">request</span>(<span class="string">&#x27;filter_by&#x27;</span>) == <span class="string">&#x27;likes&#x27;</span>, function (<span class="variable">$q</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$q</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;likes&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="title function_ invoke__">request</span>(<span class="string">&#x27;likes_amount&#x27;</span>, <span class="number">0</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable">$query</span>-&gt;<span class="title function_ invoke__">when</span>(<span class="title function_ invoke__">request</span>(<span class="string">&#x27;filter_by&#x27;</span>) == <span class="string">&#x27;date&#x27;</span>, function (<span class="variable">$q</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$q</span>-&gt;<span class="title function_ invoke__">orderBy</span>(<span class="string">&#x27;created_at&#x27;</span>, <span class="title function_ invoke__">request</span>(<span class="string">&#x27;ordering_rule&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>它看起来可能不会更短或更优雅，但最强大的是可以传递参数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">query</span>();</span><br><span class="line"><span class="variable">$query</span>-&gt;<span class="title function_ invoke__">when</span>(<span class="title function_ invoke__">request</span>(<span class="string">&#x27;role&#x27;</span>, <span class="literal">false</span>), function (<span class="variable">$q</span>, <span class="variable">$role</span>) &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$q</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;role_id&#x27;</span>, <span class="variable">$role</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable">$authors</span> = <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">get</span>();</span><br></pre></td></tr></table></figure><h3 id="10-BelongsTo-关联的默认模型对象"><a href="#10-BelongsTo-关联的默认模型对象" class="headerlink" title="10. BelongsTo 关联的默认模型对象"></a>10. BelongsTo 关联的默认模型对象</h3><p>假设有个 Post（帖子） 对象属于 Author （作者）对象，在 Blade 模板中有下面的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; <span class="variable">$post</span>-&gt;author-&gt;name &#125;&#125;</span><br></pre></td></tr></table></figure><p>但是如果作者被删除，或者由于某种原因没有设置呢？ 那么就会导致报错，可能是“property of non-object（非对象属性）”。</p><p>当然你可以用下面的代码来必变这种错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; $post-&gt;author-&gt;name ?? &#x27;&#x27; &#125;&#125;</span><br></pre></td></tr></table></figure><p>不过你可以再模型定义时候就解决这个问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public function author()</span><br><span class="line">&#123;</span><br><span class="line">    return $this-&gt;belongsTo(&#x27;App\Author&#x27;)-&gt;withDefault();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，在这个帖子下没有关联作者的时候，author（）关联关系将返回一个空的App\Author 模型。</p><p>更进一步，我们可以设置一些默认属性个这个模型。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">author</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">belongsTo</span>(<span class="string">&#x27;App\Author&#x27;</span>)-&gt;<span class="title function_ invoke__">withDefault</span>([</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Guest Author&#x27;</span></span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>太长了，<a href="http://blog.kbiao.me/2019/01/05/20-Laravel-Eloquent-Tips-and-Tricks/">下一篇</a>再续上🤔😘</p><p><a href="http://blog.kbiao.me/2019/01/05/20-Laravel-Eloquent-Tips-and-Tricks/">http://blog.kbiao.me/2019/01/05/20-Laravel-Eloquent-Tips-and-Tricks/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.kbiao.me/2019-01-03-15465238831311.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;腾讯实习的项目按照公司的主流技术选型是PHP 流派的，而我习惯了 JAVA 的体系面对这个最好的语言还是挺不适应的。特别是很多写法用法以及框架知识不在文档中，语法又及其灵活就产生和每次看别人的代码都有种woc 还能这么写的感觉。所以遵循语言的编程范式，总结理解一些小技巧也是很有必要的。下面是翻译自 Laravel-News 的一篇教程，总结了 Laravel 的对象关系映射框架（ORM）的几个小技巧。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="全干工程师的收藏夹" scheme="https://blog.kbiao.me/categories/%E5%85%A8%E5%B9%B2%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E6%94%B6%E8%97%8F%E5%A4%B9/"/>
    
    
    <category term="php" scheme="https://blog.kbiao.me/tags/php/"/>
    
    <category term="laravel" scheme="https://blog.kbiao.me/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>也来聊聊罗胖的2018跨年演讲</title>
    <link href="https://blog.kbiao.me/talk-about-Luo-2018-New-Year-Speech/"/>
    <id>https://blog.kbiao.me/talk-about-Luo-2018-New-Year-Speech/</id>
    <published>2019-01-01T10:50:41.000Z</published>
    <updated>2022-05-03T13:54:36.581Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.kbiao.me/2019-01-01-15463501406666.jpg"><br>高中时候跨年的仪式感大概来自于南方周末的新年献词，内容妙语连珠，评论力透纸背，串起一年的大事件，又总能给人以温暖和信心。这几年报纸都几乎要消失了，跨年的方式也多种多样了起来。从15年的第一场《时间的朋友》演讲开始，罗胖给了大家一种除了歌舞喧嚣之外的又一种跨年选择。<br>罗胖确实是一个很厉害的人。他一直坚持到现在的60秒语音，到《罗辑思维》脱口秀节目发展成为得到 APP，几乎是现在最成功的知识付费应用了，在做知识分享商业化非常成功。当然人红是非多，这个长达四小时的演讲几乎算是互联网小圈子的春晚了。演讲还在进行，知乎上问题讨论就多了起来，而且是负面的声音占了主流。我的阅历见识还不足以评判罗胖输出的所有知识观点，我只是凑热闹聊聊这个演讲。</p><span id="more"></span><p>从演讲本身来说真的是非常成功，内容节奏，现场气氛整体给人都比较舒服，这样的呈现效果来说确实是很难得。很少有人能把长达四个小时的演讲把握的如此精彩的，当然也离不开配乐以及 PPT 团队的贡献，说实话这个现场的演示幻灯片确实是顶级的，比某些厂商产品发布会走心多了。把一场演讲能做成这种程度的产品，确实离不开背后一个很厉害的团队。不少人吐槽广告问题，本来这个演讲就是作为一个产品或者商品出现的，我觉得还是可以接受的，广告多少，收钱不影响演讲本身的水平和诚意。</p><p>内容方面给我感触也比较深。很多人把罗辑思维吐槽为知识的二道贩子，通过贩卖焦虑来收割韭菜。不过我却觉得他的演讲是近一段时间看到文章的一股清流，他在总体不是很景气的大环境下说了很多鼓舞人心的话，传递着一种积极乐观的情绪。第一部分的开篇就说了大实话：</p><blockquote><p> 2018年是很难，但是我们做事的人都知道：2018年难，那一年不难？<br> 对于做事的人来说，难就不干了么？对那些不做事的人来说，难不难又有什么关系？</p></blockquote><p>特别是举例说明的“我·妈·水”问题一针见血，不做事情的人总会想着一些抽象问题，但是做事情的人往往面临的是具体的问题，很多抽象的逻辑在具体事情面前不会很复杂，抽象的讨论往往结果用一句见仁见智来总结。</p><p>学编程也会问那门语言是最好的语言？这个就可以吵几年；或者找工作的时候就开始操心前端还有没有前途，现在入行人工智能还来得及么？</p><p>拿罗胖的话来解释叫大趋势对于个人来说不重要，我们个人要把握的是自己的小趋势。那门语言好不好，得看现在做的项目领域是啥，性能要求高低，团队里的人会啥，工期安排如何，等等。这些问题综合以后得到的答案往往就是确定而具体的了。找工作的时候投机找个热门的可能侥幸成功更多的是撞个头破血流，毕竟别人几年的功力不是上网找的面经和一本《XXX入门到精通》能速成的，反倒不如潜心准备自己所长厚积薄发。</p><p>真正做事的人不会悲观。用大环境大趋势来考虑问题往往是杞人忧天。</p><p>这个点是留给我影响最深的，但是在开篇一小时内就说明白了。以至于十一点之后的部分广告穿插我就放弃直播转收拾总结自己的2018去了，不过后来还是通过文字稿补充了落下的部分。</p><p>总体来说他是鼓励大家积极乐观去看世界。提出了一个“小趋势”，问了五个大问题。我总结来说是三点：</p><ol><li>要习惯变化并且拥抱变化，变革最后一定是好事，相信社会总是在进步；</li><li>提醒自己在中国这么复杂庞大的圈子里自己经常是个少数派，做事评论前努力跳出偏见找真相；</li><li>要有长线眼光，保持积极理性。举例是说活过百岁是以后的常态，余生很长不要慌张；</li></ol><p>我理解来说在跨年的时刻有一个点可以触动自己其实这个演讲就没有白听，没有浪费时间。不同的听众，吸收、转化、选择能力不同，听的心态不同本身就很难统一，但也不能奢望四小时的演讲就可以帮助大家找出致富先机，洞察未来趋势。跨年之夜聚集很多志同道合的人，去总结梳理，安静倾听就是一种对抗现代过分娱乐喧嚣的办法。</p><p>接收一些不一样的声音，可能只是一个老观点看看他怎么说，他怎么举例，几万人在听的演讲总是不失其趣味性；可能是生造的名词，可能说理方式不符合预期，毕竟别人只是帮我们开启一个思考的大门，学习知识探求真理这件事还是得自己来；码农也有一句格言，“Talk is cheap，show me your code”，也就是纸上得来终觉浅，绝知此事要躬行。罗胖的演讲就是他观念的证明，而我们更是要提醒自己去做一个会做事能做事的人，奔跑在路上就不暇顾及那些嘈杂喧嚣了。</p><p>听一场演讲或者看一本书甚至和一个人交流，重要的不是找出别人的问题，而是在别人的思想里检查和寻找自己的不足。老祖宗也提醒过我们“人之患也，在好为人师”。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://mp.weixin.qq.com/s/AC_pcGJA-XR1GfXjfii4JA">首发｜罗振宇2018“时间的朋友”跨年演讲未删减全文</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.kbiao.me/2019-01-01-15463501406666.jpg&quot;&gt;&lt;br&gt;高中时候跨年的仪式感大概来自于南方周末的新年献词，内容妙语连珠，评论力透纸背，串起一年的大事件，又总能给人以温暖和信心。这几年报纸都几乎要消失了，跨年的方式也多种多样了起来。从15年的第一场《时间的朋友》演讲开始，罗胖给了大家一种除了歌舞喧嚣之外的又一种跨年选择。&lt;br&gt;罗胖确实是一个很厉害的人。他一直坚持到现在的60秒语音，到《罗辑思维》脱口秀节目发展成为得到 APP，几乎是现在最成功的知识付费应用了，在做知识分享商业化非常成功。当然人红是非多，这个长达四小时的演讲几乎算是互联网小圈子的春晚了。演讲还在进行，知乎上问题讨论就多了起来，而且是负面的声音占了主流。我的阅历见识还不足以评判罗胖输出的所有知识观点，我只是凑热闹聊聊这个演讲。&lt;/p&gt;</summary>
    
    
    
    <category term="大学生活" scheme="https://blog.kbiao.me/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="碎碎念" scheme="https://blog.kbiao.me/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>努力奔跑 诸事顺利</title>
    <link href="https://blog.kbiao.me/lucky-2019/"/>
    <id>https://blog.kbiao.me/lucky-2019/</id>
    <published>2018-12-31T16:50:41.000Z</published>
    <updated>2022-05-03T13:54:50.260Z</updated>
    
    <content type="html"><![CDATA[<p>每年的最后一天配合着周末，大家都生出了一些仪式感。媒体们回顾着年度大事，名人们开始总结年度汉字，互联网应用纷纷发布了年度数据替我们回顾过去的365天把时间都分配给了谁。总体看起来过去的一年大家都不是很顺利，但是也都对未来充满了希望。</p><span id="more"></span><p>年初的一只蛙让从象牙塔过渡到职场的我们90后找到了一个生活关键词——佛系；年中的世界杯德国没有出线大家都一起感觉到今年不是很顺于是慌得一批；年末开始人人祈求锦鲤给跌宕起伏的18年加一点上扬的音符。这些流行语关键字勾勒出了一年的起伏节奏，是国家的节奏，是社会的节奏，更是我们每个人的节奏。</p><p>大概是十年一个轮回，上次能明显的感受到挫折中又饱含信念与希望的大概是2008年。十年前的我，还没有那么多的生活体验让我发现这一年的不同。如今站在2018年的尾巴上回望，那些曾经感觉遥远的经济，政治，文化事件前所未有的感觉到和自己开始产生了关联，我不再是个孩童，听别人转述故事或者自己好奇的观察这个世界，而是逐步迈出自己的脚步参与到社会的洪流之中。</p><h3 id="生命需要一种仪式感"><a href="#生命需要一种仪式感" class="headerlink" title="生命需要一种仪式感"></a>生命需要一种仪式感</h3><p>生命需要一种仪式感，给约定加上些许情怀与重量。每年给自己写一份总结便是我大学以来一直的一种仪式感。以往每年我都会有年初的计划作为参照，然后发现自己的计划几乎从来没有赶得上变化。到了17年末的自己大概已经放弃了这个仪式感，让在18年末回望的时候就无据可依。这时候才有体会，计划总结不是为了刻板执行，而真的就是一种仪式感，记录自己走过的路，让接下来的脚步更加扎实有方向。总结计划不是一个 todo list，更多的是锚定一个方向，也给自己一些时间看看走过的路。失去了这个锚点，就让我感觉仿佛研究生的这一年没有往年那么精彩。</p><h3 id="在家人的眼里我已经是个大人了"><a href="#在家人的眼里我已经是个大人了" class="headerlink" title="在家人的眼里我已经是个大人了"></a>在家人的眼里我已经是个大人了</h3><p>在家人的眼里我已经是个大人了，毕竟25岁的我已经长的和25年前的爸爸几乎一样。那时候的爸爸已经开始打拼自己的事业，虽说我还是读研，有着学生的身份，但是也已经到了慢慢需要转变自己角色的时候。家里的事情，爸妈开始和我商量；我自己的方向，父母已经无法导航。</p><p><img src="https://image.kbiao.me/2019-01-01-E57D196F-F50F-4479-9F21-B98A88003726.png" alt="E57D196F-F50F-4479-9F21-B98A88003726"></p><p>带着爷爷等家人一起逛北京让我真正开始感觉自己长大了。借着女朋友工作了力量，我在北京也算是有了一个自己的小窝。虽然只有十几平米，但足够给爸妈，姑姑和爷爷一起准备一顿中秋的晚饭，这是个值得铭记时刻。陪着爷爷看故宫的时候，爷爷开心的和大家说，我们也算是京城有人了。这一句听起来半开玩笑的话给祖孙三代一起在他乡度过的这个中秋写下了一个注脚。一生面朝黄土背朝天的爷爷，把爸爸送到了城里，爸爸支持我能开始在首都学习生活。一代代人的接力，我们都在奔跑，我们都是追梦人。如今我是他们的骄傲，接力棒交到了我的手里我应该要有自己的担当，守护家人的笑容。</p><p><img src="https://image.kbiao.me/2019-01-01-UNADJUSTEDNONRAW_thumb_1160.jpg" alt="UNADJUSTEDNONRAW_thumb_1160"></p><h3 id="身心健康都由自己掌控"><a href="#身心健康都由自己掌控" class="headerlink" title="身心健康都由自己掌控"></a>身心健康都由自己掌控</h3><p>对家庭，责任的认识的增强是成长一部分，对个人身体健康的关注又是成长的另一面。段子都在说90后的脱发和枸杞保温杯，对身体健康的关注确实是今年的有一个关键词。年初就来了一场大病，大过年让家人陪着医院折腾了几天，一年里断断续续几次感冒高烧，最严重一次医院打了三天吊瓶。虽说自己本来也没有强壮的体格，但是过去一年里身体的问题表现是越来越明显了，立志要坚持运动也总是做不到。主要的问题就是颈椎，腰椎这些职业病，以及长期不锻炼带来的体质弱，气候变化就容易感冒发烧。解决方案就是，椅子加靠垫，显示器尽量抬高，工作之余尽量走动，少喝咖啡多喝茶水。当然更重要的还是要养成运动的习惯，为自己，为家人，2019要保重身体。</p><p>游戏成为生活的一部分，也是我的2018不太一样的地方。虽然作为一个90后也是在电子游戏的陪伴下成长的，以前也玩过不少游戏，但是不是像过去的一年里一样他成为生活的重要组成部分。一方面我的时间经济都有了自己支配的自由，我可以更容易去接触更多游戏，另一方面游戏也迎来一个好年，无论是电竞逐步认可，几大赛事中国队夺魁带来的社会影响，以及游戏行业的努力，给游戏正名。游戏成为了文化生活的一部分，而不再是那个电子海洛因，毁掉一代年轻人。毕竟一代代年轻人被收音机，电视机，摇滚街舞都一遍遍毁灭过了，也到了浴火重生的时候了。一月份入手 Switch，随后收了二手 PS4，年初有了马里奥和塞尔达让我看到了不一样的游戏世界，不是只有中国式网游的氪金养成和打打杀杀；随后的底特律，蜘蛛侠以及战神都在以比电影更有代入感的方式讲了一个好故事；马里奥赛车和星露谷物语消磨了很多时光，也带来了很多快乐。有时候甚至感觉，玩游戏的时候时间才是真正属于自己的。<br> <img src="https://image.kbiao.me/2019-01-01-UNADJUSTEDNONRAW_thumb_9da.jpg" alt="UNADJUSTEDNONRAW_thumb_9da"></p><h3 id="个人成长的焦虑在过去的一年只增不减"><a href="#个人成长的焦虑在过去的一年只增不减" class="headerlink" title="个人成长的焦虑在过去的一年只增不减"></a>个人成长的焦虑在过去的一年只增不减</h3><p>买了十几门网课，几十本电子书几乎都没有看完。还不如本科时候，只在慕课网就有上千小时的学习记录带来的收获感强。不过也说明了自己在不断地成长，了解的越多越感觉自己的无知，这也才是我不断追求的兴奋点。</p><p>一直以来我都有个习惯，隔一段时间就要去大书店，大图书馆逛逛，很多时候不是为了看书，因为我已经很习惯电子阅读了，而为了感觉一下图书馆的氛围，看那么多的书我没有看过，那么多事情我还不知道，那么多东西和我相关我却没有看见，就是找这种觉得自己无知的感觉，是不断刺激我探索来源。</p><p>现在获取知识信息的成本越来越低了，一门课，一本书几块钱到几十块钱，日常外出吃饭的花销都比这个大，所以很容易就屯了很多知识。这个习惯有好有坏。适当的焦虑提醒自己无知，别人的总结梳理帮自己快速打开新世界的大门，在这个时代，快速高效地甄别提取信息是个非常重要的能力，个人的成长要依赖越来越多的周边知识，需要不断扩充知识面来抓住可能的机遇。但是过分的焦虑就会适得其反，甚至让人感觉放弃治疗。一般情况是比较讨厌某些公众号推广时候管用的几十个 G 的资料分享，基本上一辈子葬身网盘永无出头之日，更会让自己习惯了用硬盘学习而不是用脑使得心态上更加浮躁。<br>19年里自己要保持对知识的兴奋和追求，增加这种兴趣落地和实践的机会，让知识逐步化身自己的能力。</p><h3 id="工作项目还算有些成果"><a href="#工作项目还算有些成果" class="headerlink" title="工作项目还算有些成果"></a>工作项目还算有些成果</h3><p>实际工作方面，18年参与了两个项目，上线了一个自己的产品，去斯里兰卡参加一次学术会议。  </p><p>在北航的平台上确实让我有了不一样的机会。中航工业的消息中间件项目，让我感受到实际的业务环境和自己平时通过博客资料了解的技术是多么的不一样。当我知道是一个消息中间件时候，我本能的可以想到有很多成熟的产品，为什么要自己做。在一次次需求的探讨设计中，我慢慢感觉到，技术只有在实际场景中落地才有意义。无论是学校的教的知识还是自己看到的新技术，大多是给了一个思考问题的方向，而真正的落地需要自己亲自实践体会。</p><p>后半年主要参与的实验室与腾讯的合作项目，让我看到了大公司，一个产品级团队的分工与合作。不过体会更深的可能是 “PHP 是世界上最好的语言”吧。一直以来我都是 JAVA 技术栈的养成，而参与这边的项目时候配合团队和公司业务习惯使用 PHP。这里不会展开谈语言的优劣，让我体会深刻的主要是能力的迁移。我用 java 做系统时候需要考虑的问题，在用 php 也同样会遇到，离开平台，语言提供的便利以后我是否还能清楚的明白其中的细节，以及在深入的使用之后才能客观做出评价煤种语言的优劣好坏不是一句话的事情。新的语言也让我看到了新的范式，看到解决同一个问题时候的不同思路，这样一个项目经历对我来说成长就不只是技术方面的了。<br><img src="https://image.kbiao.me/2019-01-01-F42DD77F-DDBE-495B-9D37-079D746AEBED.png" alt="F42DD77F-DDBE-495B-9D37-079D746AEBED"></p><p>另外自己大二就一直想着有自己的产品，今年终于在女朋友的大力支持下完成上线，得益于导师的支持推广，半年时间获得五千多用户，也算是一个不小的成绩。通过这个猫途校园小项目，我也有机会自己亲自参与一个产品的建设过程，而且是自己的亲儿子。技术并不是产品的全部，而且需求很多时候是无法预设的。做出来比想得好重要的多。产品虽小，半年时间也经历了二三十个版本的迭代，很多细节功能是无法提前预设的，很多技术难点也不是实现之前可以想得到的。这样的一段经历，让我以后作为手艺人吃饭的日子里能更有大局观。当然有了儿子还得想办法养大，作为一个工具产品，怎么能让流量养活自己是我接下来需要认真思考的问题了，好的产品总不能总靠赞助活着。<br><img src="https://image.kbiao.me/2019-01-01-E6C50F4F-C965-486B-9ACD-1C6252CD922A.png" alt="E6C50F4F-C965-486B-9ACD-1C6252CD922A"></p><p>虽说本科时候就跟着水过论文，但是正儿八经的学术会议今年是第一次参加。不能说这个会议有多么高级，但这样的一次经历也是弥足珍贵，感受学术氛围，参与论文写作，也是读研究生的意义所在。文章来源于实验室长期维护的产品北航在线编程平台，我也接过了学长们传递的接力棒，负责接下来的开发运维工作。也希望能继续深耕这个项目，挖掘自己的价值，产出属于自己的学术成果。<br><img src="https://image.kbiao.me/2019-01-01-510F00A2-ACA1-47C0-A766-D8E2ED03A5D8.png" alt="510F00A2-ACA1-47C0-A766-D8E2ED03A5D8"></p><h3 id="生活的本来面貌"><a href="#生活的本来面貌" class="headerlink" title="生活的本来面貌"></a>生活的本来面貌</h3><p>拉拉杂杂的总结下来，过去的一年自己还是做了不少事情的。只是长期没有表达输出，便开始越来越惧怕写作。没有写作输出，表达能力愈发退化，越无法说清楚事情，就干脆不再总结思考，这么浑浑噩噩过了一年。以上几千字可能也有不少语句不通，表达不清的地方，很多话想说想总结，到头来却只是记叙，记录一下18年发生在自己身上的一些重要事情，记录一下此时此刻的感觉。更重要的是通过这样的一个仪式感给19年开个好头，对自己表达输出的训练应该要成为19年的一个小目标。</p><p>什么才是生活的本来面貌？家庭、健康、工作一件件的都开始在我的总结规划上体现，不再是空谈梦想与远方，这可能就是成长。以为可以消除一切压力与焦虑，摆脱所有传统习俗与社会舆论，随心所欲，自由自在；事实上逐步认识到到自由与责任永远相伴相生。没有什么容易不容易，丰富的经历，起起落落的剧情就是生活本来的面貌，在此基础上，不堕信心，不失希望，不断从中汲取前行的力量。<br>愿19年诸事顺利！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;每年的最后一天配合着周末，大家都生出了一些仪式感。媒体们回顾着年度大事，名人们开始总结年度汉字，互联网应用纷纷发布了年度数据替我们回顾过去的365天把时间都分配给了谁。总体看起来过去的一年大家都不是很顺利，但是也都对未来充满了希望。&lt;/p&gt;</summary>
    
    
    
    <category term="大学生活" scheme="https://blog.kbiao.me/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="碎碎念" scheme="https://blog.kbiao.me/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>全干工程师的收藏夹【第二期】</title>
    <link href="https://blog.kbiao.me/%E5%85%A8%E5%B9%B2%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E6%94%B6%E8%97%8F%E5%A4%B9%E3%80%90%E7%AC%AC%E4%BA%8C%E6%9C%9F%E3%80%91-1b4307a47e60/"/>
    <id>https://blog.kbiao.me/%E5%85%A8%E5%B9%B2%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E6%94%B6%E8%97%8F%E5%A4%B9%E3%80%90%E7%AC%AC%E4%BA%8C%E6%9C%9F%E3%80%91-1b4307a47e60/</id>
    <published>2018-07-29T12:21:41.000Z</published>
    <updated>2022-05-03T12:50:14.475Z</updated>
    
    <content type="html"><![CDATA[<p>我是一个预备役码农，这是我新做的的一个小项目。把每天阅读很多的文章，选出一些值得思考的内容做推荐。针对每篇文章我会写一小段中文简评，督促自己认真阅读的同时也给同为码农的你一些参考。我觉得码农才能知道码农的需要，而我作为被老师誉为“全干工程师”预备役码农，方方面面都会有所涉猎。</p><p>今天是全干工程师阅读分享的第二期，这里会记录我看到的值得分享的文章，期待和你一起进步！阅读本期所有文章需35分钟。</p><p><em><em>在微信平台阅读的同学，由于平台限制无法直接跳转，我把链接直接放在博客中，读完正文后可以通过原文链接获取三篇推荐的原文地址。</em></em></p><blockquote><p>今天的分享包含架构设计和Java进阶相关主题。这几篇文章的重点不在与分享知识点，而是通过分享工程的经历来带给你思考。工程能力其实就是解决问题的能力。</p></blockquote><span id="more"></span><hr><h3 id="为什么Segment会从微服务退回单体架构？"><a href="#为什么Segment会从微服务退回单体架构？" class="headerlink" title="为什么Segment会从微服务退回单体架构？"></a><a href="http://www.infoq.com/cn/news/2018/07/segment-microservices">为什么Segment会从微服务退回单体架构？</a></h3><p><img src="http://oyq2ejkim.bkt.clouddn.com/18-7-29/63130683.jpg" alt="为什么Segment会从微服务退回单体架构？"></p><p>记得上高级软件工程的第一节课的时候老师就强调了No Sliver Bullet。软件开发的新技术和最佳实践不断的涌现，从微服务到云原生架构，新概念层出不穷。新的就是好的吗？这篇文章的内容可以给我们一些思考。有一本书叫《恰如其分的软件设计》，也听过一句名言叫“架构设计的本质是组织结构设计”等等，这些看似不同的表述都在强调软件工程的一个重要特点，就是需要基于实际情况去设计解决方案。本文讲述的事情是非常“非主流”的，但带来的思考却是主流的。</p><blockquote><p>原链：<a href="http://www.infoq.com/cn/news/2018/07/segment-microservices">http://www.infoq.com/cn/news/2018/07/segment-microservices</a>  约9分钟读完</p></blockquote><hr><h3 id="阅读开源框架，遍览Java嵌套类的用法"><a href="#阅读开源框架，遍览Java嵌套类的用法" class="headerlink" title="阅读开源框架，遍览Java嵌套类的用法"></a><a href="http://zhangyi.xyz/usage-of-java-nested-class/">阅读开源框架，遍览Java嵌套类的用法</a></h3><p><img src="http://oyq2ejkim.bkt.clouddn.com/18-7-29/38435122.jpg" alt="阅读开源框架，遍览Java嵌套类的用法"></p><p>要不是最近在参与一个PHP项目，否则是不会对于Java的面向对象有这么深的体会。在习惯了Java的各种规范以后，会觉得面向对象的思路是一个非常自然的过程。平时的项目中所遵循的各种习惯性的写法，或者各种最佳实践在更换了语言体系的时候突然又了更深入的体会。这篇文章是早以前就读过的，今日又一次偶遇便分享给大家。Java的类机制是面向对象的重要体现，内部类的使用在各种开源框架中普遍存在，他们保证了代码的整洁优雅，给用户的接口清晰自然。本文作者通过梳理内部类机制在著名的开源项目中的使用，给出了内部类使用的集中场景及其作用。结合自己平时的项目经验，相信会带来很多思考。</p><blockquote><p>原链：<a href="http://zhangyi.xyz/usage-of-java-nested-class/">http://zhangyi.xyz/usage-of-java-nested-class/</a>  约15分钟读完</p></blockquote><hr><h3 id="天池中间件大赛dubboMesh优化总结"><a href="#天池中间件大赛dubboMesh优化总结" class="headerlink" title="天池中间件大赛dubboMesh优化总结"></a><a href="https://www.cnkirito.moe/dubboMesh/">天池中间件大赛dubboMesh优化总结</a></h3><p><img src="http://oyq2ejkim.bkt.clouddn.com/18-7-29/74610260.jpg" alt="天池中间件大赛dubboMesh优化总结"></p><p>阿里天池中间件性能挑战赛期间我正好在参与一个中间件项目，赛题几乎就是项目需求的抽象。我当然就摩拳擦掌跃跃欲试，结果却因为“学业繁忙”，无疾而终，非常遗憾。对于Java 的学习，经历了CRUD的信息系统入门之后，网络编程是一个重要的进阶点。尽管常说Java的性能不如C++，然而实际应用中Java 的高性能异步非阻塞网络框架Netty已经经历了众多大型项目考验，成为了如淘宝等业务的基石，在业务与性能上都达到了不俗的成绩。本文作者详细讲述了参赛过程，其中最重要的就是涉及到了netty的学习和优化过程。可以作为一片入门Java网络编程的科普贴来看，当然从重学习作者在项目中发现问题解决问题的思路也是非常不错的。作者并非什么专家大神，平易近人的语言和循序渐进的思路会给我们一些亲切感。</p><blockquote><p>原链：<a href="https://www.cnkirito.moe/dubboMesh/">https://www.cnkirito.moe/dubboMesh/</a>  约10分钟读完</p></blockquote><hr><h3 id="吸猫专区"><a href="#吸猫专区" class="headerlink" title="吸猫专区"></a>吸猫专区</h3><p><img src="http://oyq2ejkim.bkt.clouddn.com/18-7-29/20724155.jpg" alt="此处输入图片的描述"></p><hr><h3 id="原文链接："><a href="#原文链接：" class="headerlink" title="原文链接："></a>原文链接：</h3><br /><br />- [（一）为什么Segment会从微服务退回单体架构？][8]- [（二）阅读开源框架，遍览Java嵌套类的用法][9]- [（三）天池中间件大赛dubboMesh优化总结][10]<hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;我是一个预备役码农，这是我新做的的一个小项目。把每天阅读很多的文章，选出一些值得思考的内容做推荐。针对每篇文章我会写一小段中文简评，督促自己认真阅读的同时也给同为码农的你一些参考。我觉得码农才能知道码农的需要，而我作为被老师誉为“全干工程师”预备役码农，方方面面都会有所涉猎。&lt;/p&gt;
&lt;p&gt;今天是全干工程师阅读分享的第二期，这里会记录我看到的值得分享的文章，期待和你一起进步！阅读本期所有文章需35分钟。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;em&gt;在微信平台阅读的同学，由于平台限制无法直接跳转，我把链接直接放在博客中，读完正文后可以通过原文链接获取三篇推荐的原文地址。&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;今天的分享包含架构设计和Java进阶相关主题。这几篇文章的重点不在与分享知识点，而是通过分享工程的经历来带给你思考。工程能力其实就是解决问题的能力。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="全干工程师的收藏夹" scheme="https://blog.kbiao.me/categories/%E5%85%A8%E5%B9%B2%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E6%94%B6%E8%97%8F%E5%A4%B9/"/>
    
    
    <category term="阅读" scheme="https://blog.kbiao.me/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>全干工程师的收藏夹【第一期】</title>
    <link href="https://blog.kbiao.me/%E5%85%A8%E5%B9%B2%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E6%94%B6%E8%97%8F%E5%A4%B9%E3%80%90%E7%AC%AC%E4%B8%80%E6%9C%9F%E3%80%91-c1d58876ec84/"/>
    <id>https://blog.kbiao.me/%E5%85%A8%E5%B9%B2%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E6%94%B6%E8%97%8F%E5%A4%B9%E3%80%90%E7%AC%AC%E4%B8%80%E6%9C%9F%E3%80%91-c1d58876ec84/</id>
    <published>2018-07-24T12:21:41.000Z</published>
    <updated>2022-05-03T13:52:19.342Z</updated>
    
    <content type="html"><![CDATA[<p>我是一个预备役码农，这是我新做的的一个小项目。把每天阅读很多的文章，选出一些值得思考的内容做推荐。针对每篇文章我会写一小段中文简评，督促自己认真阅读的同时也给同为码农的你一些参考。我觉得码农才能知道码农的需要，而我作为被老师誉为“全干工程师”预备役码农，方方面面都会有所涉猎。</p><p>今天是全干工程师阅读分享的第一期，这里会记录我看到的值得分享的文章，期待和你一起进步！阅读本期所有文章需35分钟。</p><p><em><em>在微信平台阅读的同学，由于平台限制无法直接跳转，我把链接直接放在博客中，读完正文后可以通过原文链接获取三篇推荐的原文地址。</em></em></p><blockquote><p>今天的三个文章背后共同的主题是选型和决策。工程师的任务就是在现实的约束下去求解问题，很多时候我们学习的教条式的知识让我们总忍不住去找最佳实践，而忽略了工程师的本职。我以为科学家的要义是在理想条件下寻找极限，工程师的任务是在现实条件下寻求平衡。为什么这个问题对于科学家和工程师来讲一样重要。</p></blockquote><span id="more"></span><hr><h3 id="MySQL在GitHub的高可用性"><a href="#MySQL在GitHub的高可用性" class="headerlink" title="MySQL在GitHub的高可用性"></a><a href="https://githubengineering.com/mysql-high-availability-at-github/">MySQL在GitHub的高可用性</a></h3><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1532446882722&di=7ac3f62eb8fc4a4ce70de14843931ed3&imgtype=jpg&src=http://img4.imgtn.bdimg.com/it/u=1140509074,84803110&fm=214&gp=0.jpg" alt="mysql"></p><p>架构设计的主要目的是为了解决软件系统复杂度带来的问题。复杂度的主要来源包括高性能，高扩展和高可用以及成本安全等方面的考虑。本文阐述了GitHub的MySQL高可用性和主服务发现解决方案，这个方案使得我们能够可靠地进行跨数据中心运维、克服数据中心隔离的影响并实现故障时的短宕机时间。现实的案例的演进过程可以让我们学习到每个决策背后的原因，而不是一味的为了高大上而去设计架构，做到有据可依。</p><blockquote><p>原链：<a href="https://githubengineering.com/mysql-high-availability-at-github/">https://githubengineering.com/mysql-high-availability-at-github/</a>  约15分钟读完</p></blockquote><hr><h3 id="为什么说JSON不是一门好的配置语言"><a href="#为什么说JSON不是一门好的配置语言" class="headerlink" title="为什么说JSON不是一门好的配置语言"></a><a href="https://www.lucidchart.com/techblog/2018/07/16/why-json-isnt-a-good-configuration-language/">为什么说JSON不是一门好的配置语言</a></h3><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1532447581070&di=ac5e7de29f2ca1dcc25edfb7dcb2ee1e&imgtype=jpg&src=http://img2.imgtn.bdimg.com/it/u=3849388262,3599136548&fm=214&gp=0.jpg" alt="json"></p><p>优劣之争总是一个很有意思的话题。本文的角度不是一般的语言框架的问题，而是一个通用的配置文件的组织结构。任何一个方案都要放在一个具体的场景下去讨论才有意义，json作为一种通用数据交换格式无疑是非常有效率的，也几乎成为了restful设计的事实通信标准。但是，在作为配置文件的角度来说它却不是那么完美。作者分析了json的一些缺点后也给出了推荐的解决方案，虽然我们不是每个人都有机会构建自己的框架或者库，但是这些理由在我们日后决策之时必然可以提示一些思考的方向。</p><blockquote><p>原链：<a href="https://www.lucidchart.com/techblog/2018/07/16/why-json-isnt-a-good-configuration-language/">https://www.lucidchart.com/techblog/2018/07/16/why-json-isnt-a-good-configuration-language/</a>  约8分钟读完</p></blockquote><hr><h3 id="Vue和React大比拼"><a href="#Vue和React大比拼" class="headerlink" title="Vue和React大比拼"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&mid=2247489220&idx=1&sn=495ed9f9278f92bd671ea54ca30df2ae&chksm=f951a387ce262a91a13328c9420777e90c285078ac1c5a4456ef31e5003df271e682812dc6e3#rd">Vue和React大比拼</a></h3><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1532447876248&di=b3aa83dd2b2ad57365a0bee4595d475e&imgtype=0&src=http://p0.qhimg.com/t016ed168688ebc74f8.jpg" alt="Vue 和React 大比拼"></p><p>前端圈内的争斗从未休止，在做技术选型之时总是一个逃不开的话题。vue的官方文档中也附带了一篇与其他框架对比的文章。这一篇文章相对来说比较客观和全面，集中讨论vue与react的异同（angular已经不在讨论范围了么？？版本更新大家hold不住了吧）。每个框架设计要解决的主要问题不尽相同，解决问题相同时候使用的策略也不相同，这就决定了他们场景的差异，一味支持谁终将变成黑粉。码农到工程师的进化应该主要体现在能结合现实场景去考虑问题吧。</p><blockquote><p>原链：<a href="https://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&amp;mid=2247489220&amp;idx=1&amp;sn=495ed9f9278f92bd671ea54ca30df2ae&amp;chksm=f951a387ce262a91a13328c9420777e90c285078ac1c5a4456ef31e5003df271e682812dc6e3#rd">https://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&amp;mid=2247489220&amp;idx=1&amp;sn=495ed9f9278f92bd671ea54ca30df2ae&amp;chksm=f951a387ce262a91a13328c9420777e90c285078ac1c5a4456ef31e5003df271e682812dc6e3#rd</a>  约10分钟读完</p></blockquote><hr><h3 id="原文链接："><a href="#原文链接：" class="headerlink" title="原文链接："></a>原文链接：</h3><ul><li><a href="https://githubengineering.com/mysql-high-availability-at-github/">（一）MySQL在GitHub的高可用性</a></li><li><a href="https://www.lucidchart.com/techblog/2018/07/16/why-json-isnt-a-good-configuration-language/">（二）为什么说JSON不是一门好的配置语言</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&mid=2247489220&idx=1&sn=495ed9f9278f92bd671ea54ca30df2ae&chksm=f951a387ce262a91a13328c9420777e90c285078ac1c5a4456ef31e5003df271e682812dc6e3#rd">（三）Vue和React大比拼</a></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;我是一个预备役码农，这是我新做的的一个小项目。把每天阅读很多的文章，选出一些值得思考的内容做推荐。针对每篇文章我会写一小段中文简评，督促自己认真阅读的同时也给同为码农的你一些参考。我觉得码农才能知道码农的需要，而我作为被老师誉为“全干工程师”预备役码农，方方面面都会有所涉猎。&lt;/p&gt;
&lt;p&gt;今天是全干工程师阅读分享的第一期，这里会记录我看到的值得分享的文章，期待和你一起进步！阅读本期所有文章需35分钟。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;em&gt;在微信平台阅读的同学，由于平台限制无法直接跳转，我把链接直接放在博客中，读完正文后可以通过原文链接获取三篇推荐的原文地址。&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;今天的三个文章背后共同的主题是选型和决策。工程师的任务就是在现实的约束下去求解问题，很多时候我们学习的教条式的知识让我们总忍不住去找最佳实践，而忽略了工程师的本职。我以为科学家的要义是在理想条件下寻找极限，工程师的任务是在现实条件下寻求平衡。为什么这个问题对于科学家和工程师来讲一样重要。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="全干工程师的收藏夹" scheme="https://blog.kbiao.me/categories/%E5%85%A8%E5%B9%B2%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E6%94%B6%E8%97%8F%E5%A4%B9/"/>
    
    
    <category term="阅读" scheme="https://blog.kbiao.me/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>我的数字生活——效率工具推荐</title>
    <link href="https://blog.kbiao.me/My-life-with-some-awesome-apps/"/>
    <id>https://blog.kbiao.me/My-life-with-some-awesome-apps/</id>
    <published>2017-03-12T11:29:53.000Z</published>
    <updated>2022-05-03T13:52:41.700Z</updated>
    
    <content type="html"><![CDATA[<p>工欲善其事必先利其器。提升效率很重要的一点就是要学会善用工具，工具可以帮助我们减少很多不必要的麻烦。对于新时代的我们，驾驭工具也成了一门必修课。选对工具，用好工具可以让我们在追求进步的路上，走的更扎实。本篇我想通过分享我自己的数字生活实践，整理和推荐一些效率工具。</p><span id="more"></span><h2 id="工具的意义"><a href="#工具的意义" class="headerlink" title="工具的意义"></a>工具的意义</h2><p>我始终认为重要的是思维方式，而不是工具的应用。工具的意义在于实践某种思维方式，或者提升某种行为的效率。工具与思维方式不匹配，那是产生不了价值的。就这个简单的道理，很多同学都会陷入不断搜罗工具的误区，甚至会迷信某种工具即可改变自己的多年的坏习惯。这种行为是本末倒置的，也是一种偷懒的表现。因为下载一个APP远比改掉自己一个坏习惯容易多了。这篇文章的思路就是以我日常工作生活中的思维习惯展开延伸到帮助我践行这些习惯所用到的软件工具。</p><h2 id="专注才能提高效率"><a href="#专注才能提高效率" class="headerlink" title="专注才能提高效率"></a>专注才能提高效率</h2><p>我们都认同一个道理，成功来自于努力。比如前些日子盛传的王健林的日程表，我们会感叹成功人士是多么的努力。其实在感叹的背后也默默给自己找到了不成功的借口，我不成功是因为我不够努力。所以接下来的某段时间里就会被工作加班，学习熬夜这样表面上的‘努力’感动到自己。其实这一切原因只是自己平时的专注程度不足罢了。<br>努力的核心是专注。单纯的努力并不能换来提升，有用的是那些‘有效’的努力。这个‘有效’的努力不仅仅是时间上的累积，否则楼下看门的大爷早已走向人生巅峰。<br>而专注又很难做到。手机的消息太多，查单词的途中就被微博拐跑；已到晚期的拖延症，不到最后关头绝不动手的恶习；时间紧任务重，无法专注等等已经是我们的生活常态。<br>为了解决这些问题，我从三个方面去寻求解法：</p><ul><li>量化自我——像管理一家公司一样管理自己</li><li>提升能力——学会正确的学习思考方法</li><li>调整心态——迅速进入状态并保持专注</li></ul><h2 id="量化自我"><a href="#量化自我" class="headerlink" title="量化自我"></a>量化自我</h2><p>忙而无功很大程度上在于我们没有做好准备，管理自己就像经营一家公司一样，要对自己的关键绩效指标有所了解，同时也要有一套与自己相适应的管理方法。而这一切的前提是能把自己量化。</p><ol><li><p>量化目标</p><p> 制定一个完善的任务计划，选择适当的目标实现路劲，是提升专注力、高效管理时间的重中之重。通过把自己的安排交给设备，自己的精力则集中于当前要做事情。也就是所谓的GTD。</p><ul><li><strong>任务前：做待办事项 奇妙清单</strong></li></ul><p>  用手机做待办应该是最普遍的需求了，每个手机都内置了相关的APP然而好用的并不多。我最初探索待办软件是从大三做了学生会主席开始的，每天事情非常多，轻重缓急各不相同，全凭脑子是记不住了，哪怕记住了也要在乱七八糟的事情中间很难李处头绪。试过多款待办后最后选择的是奇妙清单，以及手机上的Arrow launcher，由不务正业的微软出品。两个可以无缝配合，管理好一天的待办。<br>   <img src="https://image.kbiao.me/2017-03-12-14893173162122.jpg?imageView2/2/w/800/interlace/1/"></p><ul><li><p><strong>任务中：用番茄工作法集中精力</strong></p><p>  番茄钟的思维：当我们开始聚焦工作时，尝试把干扰全部记录起来，留到番茄钟以外去解决。比如一般设定一个专注周期为25分钟，这25分钟就专注于做当前的这一件事情。这是对执行力最好的训练，也是拖延症的克星。</p></li></ul><p> 我推荐的番茄钟工具就是 <strong>番茄土豆</strong> 也是一款跨平台工具，甚至拥有Chrome的插件。他的特色在于把番茄钟与待办（TODO）相结合，然后提供丰富的记录信息，为以后的反思总结提供了依据。当然，颜值高也是推荐它的重要原因。<br> <img src="https://image.kbiao.me/2017-03-12-14893173793399.jpg?imageView2/2/w/800/interlace/1/"><br> 当然真正实践番茄工作法的还有很多细节，也要在自己的实践中摸索总结。可以参考<a href="https://book.douban.com/subject/5916234/">《番茄工作法图解》</a>。</p><ul><li><strong>任务后：时间记录 分析总结  timeLoger</strong><br> <img src="https://image.kbiao.me/2017-03-12-14893192334032.jpg?imageView2/2/w/800/interlace/1/"></li></ul></li><li><p>量化财务：</p></li></ol><ul><li>学会记账：网易有钱<br><img src="https://image.kbiao.me/2017-03-12-14893175902841.jpg?imageView2/2/w/800/interlace/1/"><br>此前用其他工具记账遇到的最大问题之一，就是每一笔收支都要费尽心思一一记下；坚持便成了老大难的问题，二使用网易有钱的几乎所有非现金收支都会被自动记账，实在是懒人福音。</li></ul><ol start="3"><li>量化信息：<ul><li><p>资料库：印象笔记</p><p>  推荐阅读：<a href="https://book.douban.com/subject/26809387/">《印象笔记留给你的空间》</a></p></li><li><p>最有效的输入是输出：HEXO搭建博客</p></li></ul></li></ol><h2 id="提升思维能力"><a href="#提升思维能力" class="headerlink" title="提升思维能力"></a>提升思维能力</h2><p>类比于推理是我们学习新知的重要能力。</p><ol><li><p>构建知识体系</p><p> 思维导图工具  XMind</p></li><li><p>相关领域阅读</p><ul><li>书签整理工具  Toby（Chrome插件）</li><li>阅读笔记 MarginNote </li><li>稍后阅读应用 Apple系列的阅读列表 </li><li>科学上网工具  XX-NET</li></ul></li><li><p>费曼学习法：把知识讲给新手听<br> 写作输出 MWeb CmdMarkDown 简书</p></li></ol><h2 id="保持专注"><a href="#保持专注" class="headerlink" title="保持专注"></a>保持专注</h2><ol><li>过滤信息来源：<br> 轻芒阅读<br> 即刻通知</li><li>碎片时间：<br> 听播客，罗辑思维的得到，喜马拉雅听等。<br> 阅读 收藏夹内容</li><li>减少选择 不如去做：<ul><li><p>优先级思维 与 四象限法</p><p>  清单App可以帮助我们理清任务，我们需要进一步对任务设计优先级来制定任务完成的顺序。设定优先级的方法就是通过下面两个问题的回答去设置任务标签：<code>重要吗？紧急吗？</code>以此分出四个维度。我们可以在每天固定的时间去清理任务定出优先级，以至于到了工作时候可以随时进入状态。同时为任务设定不同级别的目标以减少在执行时候的焦虑。</p></li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文推荐的APP包括：</p><ul><li><p>效率工具： </p><blockquote><p>奇妙清单，Arrow Launcher (安卓)，aTimeLoger,番茄土豆 </p></blockquote></li><li><p>记录工具 </p><blockquote><p>网易有钱，印象笔记，XMind,</p></blockquote></li><li><p>阅读工具</p><blockquote><p>Toby(Chorme插件)，MarginNote(Apple 系列)，稍后阅读,轻芒阅读，即刻，播客（看个人喜好）</p></blockquote></li><li><p>写作工具</p><blockquote><p>MWeb（Apple 系列），CmdMarkDown，HEXO博客（简书也行）</p></blockquote></li><li><p>其他工具</p><blockquote><p>XX-NET(科学上网)</p></blockquote></li></ul><hr><p>其实以上每一个主题都足够写一篇非常详细的文章去详解实战经验，但是我这篇文章还是更侧重APP的推荐，毕竟自己也还在实践这些效率工作学习方法的路上。</p><blockquote><p>减少关注方向，经常记录，定期思考，反复实践。<br>不把信息当作知识，不把收藏当作学习，不把阅读当作思考，不把储存当作掌握。<br>不提炼总结、不应用学习、不深入思考、不实践反馈，就不会变成自己的能力。</p></blockquote><p>共勉。</p><p><em>本文思维导图</em><br><img src="https://image.kbiao.me/2017-03-12-14893155580938.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;工欲善其事必先利其器。提升效率很重要的一点就是要学会善用工具，工具可以帮助我们减少很多不必要的麻烦。对于新时代的我们，驾驭工具也成了一门必修课。选对工具，用好工具可以让我们在追求进步的路上，走的更扎实。本篇我想通过分享我自己的数字生活实践，整理和推荐一些效率工具。&lt;/p&gt;</summary>
    
    
    
    <category term="ToolTips" scheme="https://blog.kbiao.me/categories/ToolTips/"/>
    
    
    <category term="工具" scheme="https://blog.kbiao.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="tips" scheme="https://blog.kbiao.me/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习笔记———Get Start</title>
    <link href="https://blog.kbiao.me/Docker-Learning-Notes-Get-Start/"/>
    <id>https://blog.kbiao.me/Docker-Learning-Notes-Get-Start/</id>
    <published>2017-03-12T01:30:01.000Z</published>
    <updated>2022-05-03T13:53:08.484Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.kbiao.me/2017-03-12-14892908756333.jpg"></p><blockquote><p>做程序员最可怕的事情是不是自己学习的速度还不如这些工具产品版本号更新的快？</p></blockquote><p>搁置了一个假期的docker学习计划，重新启动docker时候发现版本号已经跳到<code>17.03</code>。恍惚记得上一次用它还是<code>1.12</code>来着，版本号跳的恍如隔世。倒也给我提了醒，<strong>学习不能拖拉，不然总是被牵着鼻子跑</strong>。</p><span id="more"></span><h2 id="Docker-发布重大更新，宣布企业版到来"><a href="#Docker-发布重大更新，宣布企业版到来" class="headerlink" title="Docker 发布重大更新，宣布企业版到来"></a>Docker 发布重大更新，宣布企业版到来</h2><p><em>3 月 2 日，Docker 官方发布了一篇博客 ，宣布企业版到来。版本也从 1.13.x 一跃到 17.03。之后，Docker 会每月发布一个 edge 版本(17.03, 17.04, 17.05…)，每三个月发布一个 stable 版本(17.03, 17.06, 17.09…)，企业版(EE) 和 stable 版本号保持一致，但每个版本提供一年维护。</em></p><p>也就是说只是换了一种版本号的，叫法成了 yy.mm格式，最新版也就是17年3月的版本。还好能跟得上节奏，上一个版本也就是1.13而已。</p><p><img src="https://image.kbiao.me/2017-03-12-14892819650098.jpg"></p><p>Docker 的 Linux 发行版的软件仓库也从以前的<a href="https://apt.dockerproject.org/">https://apt.dockerproject.org</a> &#x2F; <a href="https://yum.dockerproject.org/">https://yum.dockerproject.org</a> 变更为目前的 <a href="https://download.docker.com/%E3%80%82%E8%BD%AF%E4%BB%B6%E5%8C%85%E5%90%8D%E5%8F%98%E6%9B%B4%E4%B8%BA">https://download.docker.com/。软件包名变更为</a> docker-ce(社区版) 和 docker-ee(企业版)。<br>旧的仓库和包名(docker-engine)依旧可以使用，但不确定什么时候会被废弃，docker-engine 的版本号也变成了 17.03.0~ce-0 这种的版本号。</p><p>这个新的企业版本中主要是针对企业用户的需求，增加了一些安全认证，审计，镜像仓库，数据中心（多租户）管理等方面的功能，方便企业部署应用，而且提供更长的支持周期，收费情况的话感觉还好（反正我也买不起，只是感觉和Oracle的产品定价比起来确实好多了）。<br><img src="https://image.kbiao.me/2017-03-12-14892831046889.jpg"><br>还好这个版本区分并不会影响我学习Docker。</p><h2 id="安装Docker-CE并运行hello-world"><a href="#安装Docker-CE并运行hello-world" class="headerlink" title="安装Docker-CE并运行hello-world"></a>安装Docker-CE并运行hello-world</h2><p>作为学习我们当然是安装社区版就足够啦。</p><h3 id="Mac-x2F-Windows-下使用Docker"><a href="#Mac-x2F-Windows-下使用Docker" class="headerlink" title="Mac &#x2F; Windows 下使用Docker"></a>Mac &#x2F; Windows 下使用Docker</h3><p>在新版本的Mac或者Windows中都可以直接安装运行Docker应用程序。Windows 要求 win 10 pro 并且开启 Hyper-V虚拟化，Mac要求OS X 10 以上，但是会与Virtual Box有冲突。</p><ul><li>Windows下载  <a href="https://download.docker.com/win/stable/InstallDocker.msi">https://download.docker.com/win/stable/InstallDocker.msi</a></li><li>Mac OS 下载  <a href="https://download.docker.com/mac/stable/Docker.dmg">https://download.docker.com/mac/stable/Docker.dmg</a></li></ul><p>不符合以上条件的可以去官网下载Docker-Tool-Box，来模拟Docker 的运行环境，也是可以学习的。Docker 是一个基于Linux内核的工具，新版中也针对其他操作系统的虚拟化技术做了兼容，配置一个学习环境还是比较容易的。<br>下载安装启动小鲸鱼以后，就可以在系统终端中执行Docker 命令了。</p><h3 id="Cent-OS-中安装Docker"><a href="#Cent-OS-中安装Docker" class="headerlink" title="Cent OS 中安装Docker"></a>Cent OS 中安装Docker</h3><p>系统官方推荐是要<code>7.3</code>，系统必须64位的.<br>由于新版本的Docker更换了发行版的仓库，以及包名，安装也和以前不太一样，最好是卸载旧版本。</p><h4 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h4><p>旧版本的Docker的软件包名为<code>docker</code>或<code>docker-engine</code>。如果以前安装过就要卸载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  container-selinux \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><p>另外原来<code>/var/lib/docker/</code>目录下的镜像，容器，数据卷，网络等都会保留，新安装的docker任然可以使用这些内容。</p><h4 id="使用-repository-安装"><a href="#使用-repository-安装" class="headerlink" title="使用 repository 安装"></a>使用 repository 安装</h4><p>第一次安装新版本需要配置一下新版 docker 的 repository </p><h5 id="设置存储库"><a href="#设置存储库" class="headerlink" title="设置存储库"></a><strong>设置存储库</strong></h5><p><em>repository 设置对于Docker CE和 Docker EE来说有些不一样。</em></p><ul><li>安装yum-utils，它提供yum-config-manager可以用来配置repo：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure><ul><li>使用以下命令设置稳定版 repository ：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><ul><li>如果需要的话可以开启edge版本的更新，这个 repository 包含在上面的repo文件中，但默认情况下禁用。可以用下面的命令开启：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager --enable docker-ce-edge</span><br></pre></td></tr></table></figure><p>要禁用edge更新：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager --disable docker-ce-edge</span><br></pre></td></tr></table></figure><h5 id="正式安装DOCKER"><a href="#正式安装DOCKER" class="headerlink" title="正式安装DOCKER"></a><strong>正式安装DOCKER</strong></h5><ul><li>更新yum包索引。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum makecache fast</span><br></pre></td></tr></table></figure><ul><li>安装最新版本docker</li></ul><p> Docker CE<code>sudo yum install docker-ce</code><br> Docker EE<code>sudo yum install docker-ee</code><br> 如果这是在添加Docker存储库之后第一次刷新包索引，会提示接受GPG密钥，并且将显示密钥的指纹。验证指纹是否正确，如果是，请接受密钥。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> 从 https://download.docker.com/linux/centos/gpg 检索密钥</span><br><span class="line">导入 GPG key 0x621E9F35:</span><br><span class="line"> 用户ID     : &quot;Docker Release (CE rpm) &lt;docker@docker.com&gt;&quot;</span><br><span class="line"> 指纹       : 060a 61c5 1b55 8a7f 742b 77aa c52f eb6b 621e 9f35</span><br><span class="line"> 来自       : https://download.docker.com/linux/centos/gpg</span><br><span class="line">是否继续？[y/N]：y</span><br></pre></td></tr></table></figure><ul><li>安装特定版本的docker<br>生产系统中不可能总是用最新版本，需要安装特定版本的话也是比较简单的。<code>yum list</code>命令列出可用版本：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum list docker-ce  --showduplicates |sort -r</span><br></pre></td></tr></table></figure><p> 列出并按版本号排序。<br>  然后选择需要的版本安装：<br>  Docker CE： <code>sudo yum install docker-ce-&lt;VERSION&gt;</code><br>  Docker EE： <code>sudo yum install docker-ee-&lt;VERSION&gt;</code></p><ul><li>启动Docker</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>docker通过运行hello-world 验证是否已正确安装。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure><p>被墙掉的小伙伴可能会报错，要不先试试 docker version 命令的输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Client:</span><br><span class="line"> Version:      17.03.0-ce</span><br><span class="line"> API version:  1.26</span><br><span class="line"> Go version:   go1.7.5</span><br><span class="line"> Git commit:   3a232c8</span><br><span class="line"> Built:        Tue Feb 28 08:10:07 2017</span><br><span class="line"> OS/Arch:      linux/amd64</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Version:      17.03.0-ce</span><br><span class="line"> API version:  1.26 (minimum version 1.12)</span><br><span class="line"> Go version:   go1.7.5</span><br><span class="line"> Git commit:   3a232c8</span><br><span class="line"> Built:        Tue Feb 28 08:10:07 2017</span><br><span class="line"> OS/Arch:      linux/amd64</span><br><span class="line"> Experimental: false</span><br></pre></td></tr></table></figure><p>也基本证明了安装正确。<br>或者注册一个daoCloud的账号，配置一下<a href="https://www.daocloud.io/mirror">docker加速器</a>国内访问也就没什么问题了。</p><ul><li><p>升级docker </p><p>这种方式安装之后如果需要升级，只需要再次更新下yum包索引。<code>$ sudo yum makecache fast</code> 然后继续选择需要安装的版本即可。</p></li><li><p>卸载docker<br>Docker CE :  <code>sudo yum remove docker-ce</code><br>Docker EE :  <code>sudo yum remove docker-ee</code><br>不会自动删除主机上的镜像，容器，数据卷或自定义配置文件。要删除所有镜像，容器和卷：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure><h4 id="下载软件包安装"><a href="#下载软件包安装" class="headerlink" title="下载软件包安装"></a>下载软件包安装</h4><ul><li>Docker CE：<br>访问 <a href="https://download.docker.com/linux/centos/7/x86_64/stable/Packages/">https://download.docker.com/linux/centos/7/x86_64/stable/Packages/</a> 并下载.rpm要安装的Docker版本的文件。</li><li>安装Docker，将下面的路径更改为您下载Docker包的路径。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install /path/to/package.rpm</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.kbiao.me/2017-03-12-14892908756333.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;做程序员最可怕的事情是不是自己学习的速度还不如这些工具产品版本号更新的快？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;搁置了一个假期的docker学习计划，重新启动docker时候发现版本号已经跳到&lt;code&gt;17.03&lt;/code&gt;。恍惚记得上一次用它还是&lt;code&gt;1.12&lt;/code&gt;来着，版本号跳的恍如隔世。倒也给我提了醒，&lt;strong&gt;学习不能拖拉，不然总是被牵着鼻子跑&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="Coding-Notes" scheme="https://blog.kbiao.me/categories/Coding-Notes/"/>
    
    
    <category term="Docker" scheme="https://blog.kbiao.me/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>安卓手机与IOS相册自动同步小技巧</title>
    <link href="https://blog.kbiao.me/Automatic-Sync-Android-album-whith-IOS/"/>
    <id>https://blog.kbiao.me/Automatic-Sync-Android-album-whith-IOS/</id>
    <published>2017-03-12T01:30:01.000Z</published>
    <updated>2022-05-03T13:12:22.909Z</updated>
    
    <content type="html"><![CDATA[<p>如果拥有苹果全家桶，各种资料跨平台同步的感觉一定是很爽的。但是对于手机不喜欢iPhone,还用着iPad的我来说，就有点纠结。特别是对于相册，iPad拍的照很容易就同步进了我的Mac，真正拍照的主力手机确是安卓，想要分享一般还得借助QQ啥的把文件传来传去。无奈iCloud又不支持安卓，几经折腾我还是得到了一个比较适合的解决方案实现跨平台无缝自动同步。</p><span id="more"></span><h3 id="工具："><a href="#工具：" class="headerlink" title="工具："></a>工具：</h3><p><strong>坚果云：</strong> 非常良心的国产同步盘应用，也就是墙内的DropBox。一直在用它同步一些资料特别是多人共享，非常方便。<br><strong>Mac：</strong> 要是没有Mac 我也不会有这种需求，同时也是这个需求让我发现了Mac的新世界——AutoMator以及Apple Script。</p><h3 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h3><ol><li><p>安卓手机下载坚果云，并打开相册同步。</p><blockquote><p>坚果云每月限流量的，免费版用户谨慎操作。</p></blockquote></li><li><p>Mac上也下载并运行坚果云，设置一个相册同步的文件夹。</p><blockquote><p>这样只要在WiFi下手机就会自动把相册同步给Mac上的那个文件夹。</p></blockquote></li><li><p>建立一个AutoMator脚本。</p><ul><li>打开Mac上自带的AutoMator。<br> <img src="https://image.kbiao.me/2017-03-12-14893039054210.jpg?imageView2/2/w/60/interlace/1/"></li><li>新建一个 <code> 文件夹操作</code> </li><li>右侧脚本配置中选取文件夹，选择刚刚设定的坚果云相册同步文件夹。 </li><li>左侧的操作中搜索<code>相册</code> 并选择 <code>将文件导入到‘照片’</code>,拖到右侧配置中。填写下相关操作配置如下：<br> <img src="https://image.kbiao.me/2017-03-12-14893045046245.jpg"></li></ul></li><li><p>保存后即可自动运行。</p><blockquote><p>脚本触发的条件就是那个文件夹项目有更新。一般我都会开机自动运行坚果云，所以手机端拍了新照片在连入WiFi时候自动同步给电脑，并触发文件夹操作，导入相册。这样在其他IOS设备，比如我的ipad上就可以同步看到了。整个过程非常流畅，没有任何认为操作，也不需要额外运行什么软件工具。我认为这是比较理想的解决方案。</p></blockquote></li><li><p>如何取消自动同步操作？</p></li></ol><ul><li>在同步文件夹上右键——服务——文件夹操作设置 取消勾选这个workflow 即可</li><li><img src="https://image.kbiao.me/2017-03-12-14893049576378.jpg?imageView2/2/w/400/interlace/1/"></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>  是否可以在Windows上同步呢？我觉也是可以的，可以同时下载iCloud windows版，以及坚果云把他俩的同步文件夹设为同一个就可以吧。但是我没有试过。<br>  更关键的是，当我打开AutoMator后看到那么多的操作，以我一个程序员的思维自然是发现了新大陆。想象多少操作可以自动化完成，而且全凭自定义。不说了，我要去看看这个还有什么新玩法了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;如果拥有苹果全家桶，各种资料跨平台同步的感觉一定是很爽的。但是对于手机不喜欢iPhone,还用着iPad的我来说，就有点纠结。特别是对于相册，iPad拍的照很容易就同步进了我的Mac，真正拍照的主力手机确是安卓，想要分享一般还得借助QQ啥的把文件传来传去。无奈iCloud又不支持安卓，几经折腾我还是得到了一个比较适合的解决方案实现跨平台无缝自动同步。&lt;/p&gt;</summary>
    
    
    
    <category term="ToolTips" scheme="https://blog.kbiao.me/categories/ToolTips/"/>
    
    
    <category term="工具" scheme="https://blog.kbiao.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="tips" scheme="https://blog.kbiao.me/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>阿里出品的ETL工具dataX初体验</title>
    <link href="https://blog.kbiao.me/%E9%98%BF%E9%87%8C%E5%87%BA%E5%93%81%E7%9A%84ETL%E5%B7%A5%E5%85%B7dataX%E5%88%9D%E4%BD%93%E9%AA%8C-f9bdf797cd4c/"/>
    <id>https://blog.kbiao.me/%E9%98%BF%E9%87%8C%E5%87%BA%E5%93%81%E7%9A%84ETL%E5%B7%A5%E5%85%B7dataX%E5%88%9D%E4%BD%93%E9%AA%8C-f9bdf797cd4c/</id>
    <published>2017-01-02T14:16:11.000Z</published>
    <updated>2022-05-03T11:31:58.915Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.kbiao.me/17-1-2/15001992-file_1483363944014_47b9.jpg"><br>我的毕设选择了大数据方向的题目。大数据的第一步就是要拿到足够的数据源。现实情况中我们需要的数据源分布在不同的业务系统中，而这些系统往往是异构的，而且我们的分析过程不能影响原有业务系统的运行。为了把不同的数据归集起来，我开始了解和接触ETL。本篇介绍阿里的开源ETL工具dataX。</p><span id="more"></span><h2 id="ETL-amp-amp-常用工具"><a href="#ETL-amp-amp-常用工具" class="headerlink" title="ETL&amp;&amp;常用工具"></a>ETL&amp;&amp;常用工具</h2><blockquote><p>ETL，是英文 Extract-Transform-Load 的缩写，用来描述将数据从来源端经过抽取（extract）、转换（transform）、加载（load）至目的端的过程。</p></blockquote><p>我的理解就是从业务系统中根据所要分析的主题，建立数据仓库的过程。大数据的应用已经非常广泛，ETL过程现在已经发展成为一个比较专门的职业，相关联的包括ETL工程师，BI分析师等等。</p><p>数据的迁移和集成都需要ETL来实现，一般来说在数据仓库的开发过程中ETL会占到70%到80%的时间，我了解到的ETL工具包括：</p><ol><li>Kattle是一个开源的ETL工具，优点是免费，资料挺多。功能挺全面的，我折腾过一段时间，感觉不是很符合需要，想要在web上使用确实会有点困难，也可能是了解不深。</li><li>DataStage，这是IBM为其配套的DB2开发的ETL工具，也可以用于其它数据库数据的集成，这个工具不错，银行用的挺多的。</li><li>Informatica，这是美国的一个数据集成公司的开发的数据集成工具，有图形界面。 </li><li>sqoop，这个是hadoop生态里的一个数据导入工具，但是它依赖于hadoop环境，也有点不符合我现在阶段的需要。</li></ol><p>当然还有其他挺多，毕竟对于数据的处理需求从信息机书诞生开始就一直存在。上面提到的这些工具比较强大，功能全面，但可能目前知识技能有限，驾驭起来不是很方便，折腾过一段时间后放弃了。我们常用的一些数据库工具也会带有导入导出功能，通过文本文件，csv文件等都能完成一个数据中专过程，但相对比较麻烦，而且功能太少对数据处理不是很方便。</p><p>直到我去云栖大会听说了DataX ，这个简洁，高效，开箱即用的ETL工具，测试过后效率也不错，调试信息也很丰富，才发现这就是我需要的。官方介绍如下：</p><blockquote><p>​ DataX 是一个异构数据源离线同步工具，致力于实现包括关系型数据库(MySQL、Oracle等)、HDFS、Hive、MaxCompute(原ODPS)、HBase、FTP等各种异构数据源之间稳定高效的数据同步功能。</p></blockquote><p><img src="https://image.kbiao.me/17-1-2/64743029-file_1483363981430_e353.png"></p><p>dataX本身只是一个数据库同步框架，通过插件体系完成数据同步过程reader插件用于读入，writer插件用于写出，中间的framework可以定义transform插件完成数据转化的需要。<br>使用它之后，我们的数据同步工作就简化成了：根据数据源选择对应的reader或者writer插件，填写必要的一个配置文件，一句命令搞定全部。</p><h2 id="dataX安装配置"><a href="#dataX安装配置" class="headerlink" title="dataX安装配置"></a>dataX安装配置</h2><ol><li>系统环境windows 、linux均可，其他必须的依赖包括：</li></ol><ul><li><a href="http://www.oracle.com/technetwork/cn/java/javase/downloads/index.html">JDK(1.8)</a> </li><li><a href="https://www.python.org/downloads/">Python(推荐Python2.6.X)</a> </li><li><a href="https://maven.apache.org/download.cgi">Apache Maven 3.x</a> （想通过源码编译的话需要，否则直接用二进制包即可）</li></ul><ol start="2"><li>安装</li></ol><ul><li><a href="http://datax-opensource.oss-cn-hangzhou.aliyuncs.com/datax.tar.gz">下载安装tar包（https://github.com/alibaba/DataX)</a></li><li>解压至本地某个目录，修改权限为755，进入bin目录，即可运行样例同步作业。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ tar zxvf datax.tar.gz</span><br><span class="line">$ sudo <span class="built_in">chmod</span> -R 755 &#123;YOUR_DATAX_HOME&#125;</span><br><span class="line">$ <span class="built_in">cd</span>  &#123;YOUR_DATAX_HOME&#125;/bin</span><br><span class="line">$ python datax.py ../job/job.json</span><br></pre></td></tr></table></figure>如果一切顺利就会看到样例输出，说明工具已经就绪可以使用了。</li></ul><h2 id="配置文件介绍"><a href="#配置文件介绍" class="headerlink" title="配置文件介绍"></a>配置文件介绍</h2><p>他的全部使用就如同安装配置部分所说,仅仅是执行一个python脚本，传入一个json配置文件。我们的关键工作就是定义这个json配置。在bin目录下也已经给出了样例配置，不过针对不同的数据源还是会有些许区别。<br>我们可以使用如下命令查看我们具体需要的配置文件样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python datax.py -r &#123;YOUR_READER&#125; -w &#123;YOUR_WRITER&#125;</span><br></pre></td></tr></table></figure><p>比如我现在需要的是从sqlserver读入，写到mysql，那么就可以尝试：<br><code>python datax.py -r sqlservereader -w mysqlwriter</code><br>输出如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;reader&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sqlserverreader&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;connection&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                               <span class="comment">/***省略多条****/</span></span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                         <span class="comment">/***省略多条****/</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;writer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mysqlwriter&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>&#x27;*&#x27;<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;connection&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                 <span class="comment">/***省略多条****/</span></span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot; /***省略多条****/&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;root&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;writeMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;insert&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;setting&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;speed&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;channel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>大致也是非常容易理解的，配置数据库账号密码，配置同步的表名列名等等信息。</li><li>jdbcUrl，username，password，table，column，writeMode（insert&#x2F;replace&#x2F;update）等为必选项，见名知意。</li><li>按照json格式填写即可，reader支持配置多个连接，只要有一个连通即可，writer只能配置一个连接。</li><li>更详细的配置参考官方wiki：<br><a href="https://github.com/alibaba/DataX/wiki/DataX-all-data-channels">https://github.com/alibaba/DataX/wiki/DataX-all-data-channels</a></li><li>Transformer的使用见下：<br><a href="https://github.com/alibaba/DataX/blob/master/transformer/doc/transformer.md">https://github.com/alibaba/DataX/blob/master/transformer/doc/transformer.md</a><h2 id="windows下乱码修复"><a href="#windows下乱码修复" class="headerlink" title="windows下乱码修复"></a>windows下乱码修复</h2>我把这个工具迁移到一台windows主机上使用时候看到控制台友好的中文提示居然都变成了乱码了（话说有中文提示也是我选择他很重要的理由啊）。还好官方也给出了解决方案：</li></ul><ol><li>打开CMD.exe命令行窗口</li><li>通过 chcp命令改变代码页，UTF-8的代码页为65001<br>​ <code>chcp 65001</code><br>执行该操作后，代码页就被变成UTF-8了。但是，在窗口中仍旧不能正确显示UTF-8字符。</li><li>修改窗口属性，改变字体<br>​ 在命令行标题栏上点击右键，选择”属性”-&gt;”字体”，将字体修改为True Type字体”Lucida Console”，然后点击确定将属性应用到当前窗口。</li></ol><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p>单核8G的虚拟机，这个速度还算可以吧，可能是数据读写不在同一台机子上网络传输也消耗了不少时间。<br><img src="https://image.kbiao.me/17-1-2/70332950-file_1483365743611_16fe6.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.kbiao.me/17-1-2/15001992-file_1483363944014_47b9.jpg&quot;&gt;&lt;br&gt;我的毕设选择了大数据方向的题目。大数据的第一步就是要拿到足够的数据源。现实情况中我们需要的数据源分布在不同的业务系统中，而这些系统往往是异构的，而且我们的分析过程不能影响原有业务系统的运行。为了把不同的数据归集起来，我开始了解和接触ETL。本篇介绍阿里的开源ETL工具dataX。&lt;/p&gt;</summary>
    
    
    
    <category term="Coding-Notes" scheme="https://blog.kbiao.me/categories/Coding-Notes/"/>
    
    
    <category term="ETL" scheme="https://blog.kbiao.me/tags/ETL/"/>
    
    <category term="大数据" scheme="https://blog.kbiao.me/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="DataX" scheme="https://blog.kbiao.me/tags/DataX/"/>
    
  </entry>
  
  <entry>
    <title>16 狂奔， 17 成长</title>
    <link href="https://blog.kbiao.me/my-Senior-life/"/>
    <id>https://blog.kbiao.me/my-Senior-life/</id>
    <published>2016-12-31T16:00:26.000Z</published>
    <updated>2022-05-03T13:52:50.572Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.kbiao.me/16-12-15/39110059-file_1481796834553_103a8.jpg?imageView2/2/w/600/interlace/1/"><br>不好意思，我的博客诈尸了。<br>恍恍惚惚2016就要结束了，大四也过了一半了，年初定的计划好像没有完成几项，计划之外的事情却也做了不少。觉得日子不能这么白白地溜走，所以决定让我的博客还魂。（毕竟好久没有出来装逼了）</p><span id="more"></span><p>现在回望过去的一年，年初立的flag大都实现了，可能并不是计划中的方式，但也还算不错。一路狂奔，一起成长。</p><ol><li>工作顺利，学生会的工作画上了漂亮的句号；</li><li>学习进步，保研成功，即将开始北漂；</li><li>生活幸福，挣了人生第一桶金，换了一套新装备；</li></ol><p>尽管很多事情并不像计划中那样发生，对于学生会我还有很多未尽的心愿，但它只是我生活的小小一站；考虑过毕业后出国，却连暑期美国夏令营都是白折腾了；考虑过投出自己漂亮的简历入职BAT，最后选择了读研的道路；考虑过做安卓，做前端，现在在java的路上越走越远。 <strong>计划本来就是用来被变化的嘛，蒙蒙胧胧有个目标，曲曲折折总会实现。</strong></p><h2 id="学生会工作的下半场"><a href="#学生会工作的下半场" class="headerlink" title="学生会工作的下半场"></a>学生会工作的下半场</h2><p>今年的前半段是我学生会的下半场。 </p><ul><li><p>青歌赛，回想起来确实是学生工作中成就感比较高的一件了。<br><img src="https://image.kbiao.me/16-12-31/2796513-file_1483191615704_d2b6.jpg?imageView2/2/w/600/interlace/1/"></p></li><li><p>做了学院戒指，明信片等文化产品，希望学院的学生会也能有自己的品牌。<br><img src="https://image.kbiao.me/16-12-31/85320252-file_1483192003979_1684b.jpg?imageView2/2/w/600/interlace/1/"></p></li><li><p>当了一回网红，顺利完成迎新，换届工作。<br><img src="https://image.kbiao.me/16-12-31/94065182-file_1483192329620_4428.jpg?imageView2/2/w/600/interlace/1/"></p></li></ul><p>可能细数起来还真是有那么多值得怀念的事情，和志同道合的小伙伴一起为了一个目标去努力感觉还是蛮不错的。第一次拉到了过万的赞助，和小伙伴们合力呈现了一场精彩的“青歌赛”，可能是学院晚会里效果能排得上号的了。迎新工作中顺便又当了一回网红勾搭更多小朋友加入学生会。哦，还有在期末来临时还拼命和我一起张罗各种收尾活动的小伙伴们，换届的时候才觉得多么不舍。感谢学生会，让我在忙碌中找到方向，得到成长，让我看到一切皆有可能。</p><h2 id="向过去告别"><a href="#向过去告别" class="headerlink" title="向过去告别"></a>向过去告别</h2><p>曾以为自己特别钟爱管理，不单当年填报志愿时候有一半管理类的专业，大学双学位都学了工商管理。现在看来自己更喜欢的还是技术方面的工作。学生会的工作，也算得上是半吊子行政管理了吧，也许有个做生意的老爹，带团队干活还算有点天赋，却感觉不是自己最想要的生活。我大学的前三年自认为折腾过了一个普通大学生能做的大部分事情，也逐渐找到了自己的方向，大四希望画一个漂亮的句号。在我之前的博客里我已经梳理了一遍我的大学生活，忙忙碌碌倒也充实。*<a href="http://blog.kbiao.me/2016/07/21/%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6%E6%88%90%E9%95%BF%E6%89%8B%E5%86%8C/">我的大学成长手册</a>*</p><p>正当我感觉一路凯歌的时候，还是有两个事情打了我的脸。<br>其一是眼看着大学生活就要结束，未来何去何从确实是个挺纠结的事情。考虑过肉身翻墙，一直也关注着各种出国留学的信息，却没有切实地去准备，有各方面的原因吧。在大三的暑假看到了学校组织的美国夏令营的机会，便想着争取一下，安慰下自己的出国梦吧。 折腾了一个多月，在签证上卡了壳，白瞎了三千块，没有办成一毛钱的事情，还错了了很多保研夏令营的机会。尽管此处有诸多想吐槽的，但也许就是命呢。</p><p>第二是暑假前还参加了腾讯的校招，杀了两关没见到BOSS便败阵下来；还给阿里网易投了简历，最终效果却是不甚理想。一路装逼上来的我，这次是打到脸了。我看起来什么都会点，和同学们吹牛逼时候也挺能侃的，但是毕竟忙着学生会工作等等杂事，技术底子还是不到家的。很多东西会用，没有深入探究原因，基本功似是而非，也就是所谓面条程序员。 </p><p>其实，在前半年学生会工作的周末也有一份兼职的实习工作。工作中我可以接触到真实的项目，体验真实的软件项目流程，学习更有方向和动力。前半年，我也从一个<code>hello world </code>程序员，蜕变成了一枚预备役码农。算是有点项目经验，所以我有才勇敢地向一线互联网公司投出简历，以为自己还能比较顺利。在这两个事情打脸之后，我开始认真思考自己的方向。过去我确实很忙，很充实；别人也看到我身兼数职还样样出彩。其实过去的我都是摊开了面上的东西，真正深入的不多。所以我选择了向过去告别，重整戎装，在专业技术方向上希望能够看到自己更长足的成长。我选择了读研。</p><p><img src="https://image.kbiao.me/16-12-31/31996257-file_1483194918840_90b1.jpg"><br>我一直觉得经历，是大学里最值得宝贝的，成绩成就什么的终究会过去的。多做点事情，才能更了解自己，机会也才能更了解你。</p><h2 id="风风火火保研路"><a href="#风风火火保研路" class="headerlink" title="风风火火保研路"></a>风风火火保研路</h2><p>我保研的决定做的是比较晚的。虽说早就有了武大的offer，但心里总感觉还是没有准备好。一方面保研的夏令营因为意外无法赶上，等我真正下定决心走保研路的时候已经九月开学。另一方面一方面学校的正式保研名单迟迟没有下发，许多名校的推免接受却已经早早结束。火烧火燎地纠结了很久，还好根据通知，成绩前4%的是一定有保研机会的。心想我应该没啥问题，于是忙不迭地开始查各路保研攻略，踩着各个学校的尾巴投出了申请信。<br>我的保研目标还是比较明确的，首先一定得是985（好像现在开始没这个名号了），然后城市就是选择北京或者上海。一方面技术的中心在这些地方，另一方面也有点想去一线城市（可能就是高考志愿留给我的想法吧）。正是因此，面对武汉大学的预录取我才有点纠结。<br>无奈上海的学校都没有搭理我。希望就寄托在了北京。九月底的时候去北京走了一遭。中科院，北大，北航，北邮一圈下来，只有北航和早就决定了的武大在推免系统一开放就给了我预录取，挣扎纠结之中选择了北航。虽说后来其他学校也陆续打电话又咨询了我的意愿，可是折腾一圈下来已经没了心境，定了就努力吧。<br>保研的过程，其实和高考填志愿差不多，也像赌博似的，最后去哪，还是得看上帝掷骰子。不过也可能是我学艺不精，所以才上下纠结吧。<br><img src="http://i1.piimg.com/567571/237bc97cc061e7ed.jpg"><br>保研时候各个学校时间窗口不一致，很多都要求在推免系统中确认有个实效。以及各个学校的面试过程和偏好也不太一样，不一定能碰的到正好对口的。不过说到底，自己的实力才是先决条件。作为一个科班出生的程序员，计算机组成原理，计算机网络，算法数据结构这些东西还是基础，不管是读研还是去大公司这些基本功大家都还是要的。就但就保研来说，成绩排名还是最重要的，然后就是英语成绩，初筛基本就是这两个指标了。然后一些科研项目经历，必然是加分项，但说到底，作为一个本科生大家更期待的还是那些基本功。</p><h2 id="保研后的学习工作和生活"><a href="#保研后的学习工作和生活" class="headerlink" title="保研后的学习工作和生活"></a>保研后的学习工作和生活</h2><p>暑期里从老师那接了个项目，开始了第一次外包项目。坎坎坷坷吃了很多亏也想明白很多事情，也第一次切切实实地感受到了一个软件工程的流程。当然最兴奋的是第一次靠自己的实力拿到了一笔收入，算是预备役码农的人生第一桶金吧。</p><p>自此，无论是真实的技术还是信心都有所增长，算一下这一年下来的代码量突破四万行应该是没有悬念的。一行代码一块钱的目标还没有实现，不多生活基本是可以自理了。基本没有再和家里拿钱，小日子也过的比较滋润。不但在年底前更新了自己的装备，也准备了新年礼物给家人，自己的角色开始转变，像一个大人的样子了。<br><img src="https://image.kbiao.me/17-1-1/89740283-file_1483202764456_ed4c.jpg?imageView2/2/w/600/interlace/1/"><br>现在的我，可以自由的睡个懒觉，看一场电影，当然作为预备役码农，最开心的事情是有时间可以去琢磨自己喜欢的技术，所以更多的时间是沉迷代码，无法自拔。双十一剁手买的都是技术书籍，厚厚一摞，更新了我的书架。<br>在基本功上吃了亏的我一定会长记性。毕业设计也想挑战更高的目标，不满足于一般的信息系统的设计与实现，转而研究docker和hadoop，毕竟云计算与大数据是未来互联网的基础。<br>更开心的事情是还有一个程序媛女友，培琦今年也一路打怪升级，拿奖学金，参加大赛拿到省级奖，还自己完成了一个app还有不少用户呢，未来的方向也越来越明确，希望明年在北京有个好着落，然后和我一起打新的BOSS。</p><p>17年我就要开始北漂了，对我和培琦来说都是全新的冒险，我也不知道应该计划些什么，更不知道将发生些什么。16年一路狂奔，大大小小做了挺多事情，17年我希望积极努力永远是我的主旋律。选择了在技术方面持续成长，一定要看到切实的成果。比如把博客真正经营起来，实现几个自己的业余项目，读书多写点笔记。等春节的时候再写下完整的计划吧，毕竟那才是我们新中真正辞旧迎新的时刻。</p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.kbiao.me/16-12-15/39110059-file_1481796834553_103a8.jpg?imageView2/2/w/600/interlace/1/&quot;&gt;&lt;br&gt;不好意思，我的博客诈尸了。&lt;br&gt;恍恍惚惚2016就要结束了，大四也过了一半了，年初定的计划好像没有完成几项，计划之外的事情却也做了不少。觉得日子不能这么白白地溜走，所以决定让我的博客还魂。（毕竟好久没有出来装逼了）&lt;/p&gt;</summary>
    
    
    
    <category term="大学生活" scheme="https://blog.kbiao.me/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="碎碎念" scheme="https://blog.kbiao.me/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>基于OAUTH2的统一认证的实例解析</title>
    <link href="https://blog.kbiao.me/%E5%9F%BA%E4%BA%8EOAUTH2%E7%9A%84%E7%BB%9F%E4%B8%80%E8%AE%A4%E8%AF%81%E7%9A%84%E5%AE%9E%E4%BE%8B%E8%A7%A3%E6%9E%90-4ab6a797b7a1/"/>
    <id>https://blog.kbiao.me/%E5%9F%BA%E4%BA%8EOAUTH2%E7%9A%84%E7%BB%9F%E4%B8%80%E8%AE%A4%E8%AF%81%E7%9A%84%E5%AE%9E%E4%BE%8B%E8%A7%A3%E6%9E%90-4ab6a797b7a1/</id>
    <published>2016-07-23T09:48:40.000Z</published>
    <updated>2022-05-03T12:52:50.989Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.kbiao.me/16-7-23/73340367.jpg?imageView2/2/w/600/interlace/1/"><br>在一个单位中，可能是存在多个不同的应用，比如学校会有财务的系统会有学生工作的系统，还有图书馆的系统等等，如果每个系统都用独立的账号认证体系，会给用户带来很大困扰，也给管理带来很大不便。所以需要设计一种统一登录的解决方案。比如我登陆了百度账号，进贴吧时发现已经登录了，进糯米发现也自动登录了。常见的有两种情况，一种是SSO（单点登录）效果是一次输入密码多个网站可以识别在线状态；还有一种是多平台登录，效果是可以用一个账号（比如QQ账号）登录多个不同的网站。</p><span id="more"></span><h2 id="SSO与多平台登录"><a href="#SSO与多平台登录" class="headerlink" title="SSO与多平台登录"></a>SSO与多平台登录</h2><p>SSO一般用于同一单位的多个站点的登陆状态保持，技术上一般参考CAS协议；多平台登录一般是Oauth体系的协议，有多种认证模式但是不具备会话管理和状态保持。<br>不过从本质上讲，我觉得两者都是通过可信的第三方进行身份验证，如果说同一单位的多个子系统共同只围绕一个第三方账户（可以称为认证中心）进行多平台登录验证，那么在第三方平台登录后再访问其他网站，效果和统一登录是差不多的。此外，Oauth2还有个好处就是可以实现跨平台的登录管理，因为他的认证过程不依赖于session和cookie，比如对于移动端设备，以及在前后端分离后这种登录认证方式也可以起到很大作用。<br>这篇文章里我就着结合之前项目中整合过的OAUTH2来讲一讲这种登录认证的过程。项目是基于Shiro+ALTU实现，参考方案<a href="http://git.oschina.net/mkk/oauth2-shiro">mkk&#x2F;oauth2-shiro - 码云 - 开源中国</a> 。</p><h2 id="oauth2的基本概念"><a href="#oauth2的基本概念" class="headerlink" title="oauth2的基本概念"></a>oauth2的基本概念</h2><p>在Oauth中至少是有用户，应用服务器，认证服务器这几个角色在交互。OAuth的作用就是让”客户端”安全可控地获取”用户”的授权，与”应用服务器”进行互动。</p><h3 id="OAuth2的基本流程"><a href="#OAuth2的基本流程" class="headerlink" title="OAuth2的基本流程"></a>OAuth2的基本流程</h3><p>用户通过浏览器访问一个应用，比如我要上慕课网学习。</p><ol><li>网站要求我登录，我选择使用QQ登录，这里的QQ登录就是那个认证服务器。</li><li>这个时候慕课提供的QQ登录链接会把我带到QQ登录页面</li><li>在QQ的登录页面完成登录后，选择授权，也就是允许慕课网获取我的资料。</li><li>这个时候我们看到浏览器经过几次跳转后返回慕课网，这个时候我们已经完成了登录。</li></ol><p>重点在于<strong>几次跳转的过程</strong>中，慕课网和QQ登录的服务之间还有过几次交互。</p><ol><li>我们选择了授权的时候QQ登录服务器会根据慕课跳转到QQ时候给出的重定向链接返回给慕课网一个code，这个code代表QQ的登录服务器认可慕课网这个应用服务器的这个请求是合法的予以放行.</li><li>慕课这个时候就会用这个code再次向QQ登录服务发起请求服务令牌（token）。</li><li>拿到这个令牌之后，接下来慕课需要用户的一些基本信息时就可以通过在向QQ服务提交的请求头里带上这个令牌，令牌验证通过就可以拿到用户资源。</li></ol><p>这一部分的操作是<strong>应用服务器和验证服务器之间</strong>的交互，这个过程对用户是透明的。这个过程中慕课网是不需要知道用户的账号密码也可以完成对用户身份的认证，这个token就可以用来标识用户资源。<br>官方的运行流程图是这样的:<br><img src="https://image.kbiao.me/16-7-23/35133968.jpg"></p><h3 id="OAuth的几种认证模式"><a href="#OAuth的几种认证模式" class="headerlink" title="OAuth的几种认证模式"></a>OAuth的几种认证模式</h3><p>上述讲的是OAuth2中支持的授权码（CODE）方式的认证流程，也是其支持的四种认证方式里最复杂的，其他的三种种包括：</p><ol><li>简化模式（implicit），(在redirect_uri 的Hash传递token; Auth客户端运行在浏览器中,如JS,Flash)</li><li>密码模式（resource owner password credentials），将用户名,密码传过去,直接获取token；</li><li>客户端模式（client credentials），无用户,用户向客户端注册,然后客户端以自己的名义向’服务端’获取资源；<br> 详细的OAuth2资料参考<a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html">理解OAuth 2.0|阮一峰的网络日志</a><br>分别适用不同场景，复杂度也比授权码模式要低，所以这里就只说说授权码模式的具体过程。</li></ol><h2 id="CODE方式认证实例"><a href="#CODE方式认证实例" class="headerlink" title="CODE方式认证实例"></a>CODE方式认证实例</h2><p>假设现在有一个应用服务器跑在我本机8000端口，认证服务器在8090端口。在需要用户登录时候把用户带到以下的一个URL.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8090/oauth/authorize?response_type=code&amp;scope=read write&amp;client_id=test&amp;redirect_uri=http://localhost:8000/login&amp;state=09876999</span><br></pre></td></tr></table></figure><p>我们注意到几个重要的参数：<br><img src="https://image.kbiao.me/16-7-23/20532229.jpg"></p><ul><li>response_type：表示授权类型，就是上面讲的那四种类型，这里用的是code方式。</li><li>client_id：表示客户端的ID，代表哪个应用请求验证</li><li>redirect_uri：表示重定向URI，验证以后的回调地址，一般用来接收返回的code，以及做下一步处理。</li><li>scope：表示申请的权限范围，</li><li>state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。作为安全校验。</li></ul><p>下面是验证服务器接受这个请求的控制器关键代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;authorize&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">authorize</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="type">OAuthAuthxRequest</span> <span class="variable">oauthRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OAuthAuthxRequest</span>(request);</span><br><span class="line">         <span class="keyword">if</span> (oauthRequest.isCode()) &#123;</span><br><span class="line">            <span class="type">CodeAuthorizeHandler</span> <span class="variable">codeAuthorizeHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CodeAuthorizeHandler</span>(oauthRequest, response);</span><br><span class="line">             LOG.debug(<span class="string">&quot;Go to  response_type = &#x27;code&#x27; handler: &#123;&#125;&quot;</span>, codeAuthorizeHandler);</span><br><span class="line">             codeAuthorizeHandler.handle();</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oauthRequest.isToken()) &#123;</span><br><span class="line">             <span class="type">TokenAuthorizeHandler</span> <span class="variable">tokenAuthorizeHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TokenAuthorizeHandler</span>(oauthRequest, response);</span><br><span class="line">             LOG.debug(<span class="string">&quot;Go to response_type = &#x27;token&#x27; handler: &#123;&#125;&quot;</span>, tokenAuthorizeHandler);</span><br><span class="line">             tokenAuthorizeHandler.handle();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             unsupportResponseType(oauthRequest, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>首先拿到这个请求以后根据请求的参数将其封装成一个<code>OAuthAuthxRequest</code>,基本就是把请求过来的参数，方法绑定便于使用。这是由oltu提供的<code>OAuthRequest</code>的进一步封装。<br>然后判断这个请求的授权的类型是否是code，也就是判断下请求参数的<code>response_type</code>是否为code，可以看到目前制作了两种类型的授权。<br>然后根据对应的授权类型，构造对应的方法处理器。下面是handle的实现接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">()</span> <span class="keyword">throws</span> OAuthSystemException, ServletException, IOException &#123;</span><br><span class="line">      <span class="comment">//验证请求是否合法，主要是针对参数做基本的校验，重定向链接，客户端ID授权范围等这些信息与注册的是否相同。</span></span><br><span class="line">      <span class="keyword">if</span> (validateFailed()) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//判断用户是否登录过，根据session判断。因此多个应用使用同一个授权服务的话，是可以直接跳过登录步骤的也就实现了单点登录的效果。如果没有登录的话，这一步的请求会被重定向至登录页面。（登录也得隐藏域会带上这些参数）</span></span><br><span class="line">      <span class="keyword">if</span> (goLogin()) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//这个请求如果是从登录页面提交过来的，那么就提交用户的登录，这个框架中交给shiro去做登录相关的操作。</span></span><br><span class="line">      <span class="keyword">if</span> (submitLogin()) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 本系统中把登录和授权放在两个步骤中完成，有点像新浪微博的方式，QQ是一步完成授权。用户未授权则跳转授权页面</span></span><br><span class="line">      <span class="keyword">if</span> (goApproval()) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">     <span class="comment">//与登录类似，也是提交用户批准或拒绝了权限请求</span></span><br><span class="line">      <span class="keyword">if</span> (submitApproval()) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//以上任意一步没有通过都是授权失败会进行相应处理，如果都通过了就发放Code码。</span></span><br><span class="line">      handleResponse();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如果以上步骤都通过的话，认证服务器会转向这个会调地址，带上发放的Code码，类似如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8000/login?code=bca654ab6133ab3cbc55bb751da93b1c&amp;state=09876999</span><br></pre></td></tr></table></figure><p>可以看到带回了返回的参数，以及原样返回的状态码。<br>应用服务器这时候拿到返回的code去换token,发起如下的一个请求：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:8090/oauth/token?client_id=test&amp;client_secret=test&amp;grant_type=authorization_code&amp;code=bca654ab6133ab3cbc55bb751da93b1c&amp;redirect_uri=http://localhost:8000/login&amp;scope=read%20write&amp;state=09876999</span><br></pre></td></tr></table></figure><p>与之前请求类似只是多了一个code字段，去验证客户端的合法性。</p><p><img src="https://image.kbiao.me/16-7-23/3286696.jpg"><br>验证服务器会在收到code以后去查找是否有支持这种code的处理器，如果有则发放token。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for (OAuthTokenHandler handler : handlers) &#123;</span><br><span class="line">            if (handler.support(tokenRequest)) &#123;</span><br><span class="line">                LOG.debug(&quot;Found &#x27;&#123;&#125;&#x27; handle OAuthTokenxRequest: &#123;&#125;&quot;, handler, tokenRequest);</span><br><span class="line">                handler.handle(tokenRequest, response);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>初始化支持的handler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initialHandlers</span><span class="params">()</span> &#123;</span><br><span class="line">        handlers.add(<span class="keyword">new</span> <span class="title class_">AuthorizationCodeTokenHandler</span>());</span><br><span class="line">        handlers.add(<span class="keyword">new</span> <span class="title class_">PasswordTokenHandler</span>());</span><br><span class="line">        handlers.add(<span class="keyword">new</span> <span class="title class_">RefreshTokenHandler</span>());</span><br><span class="line">        handlers.add(<span class="keyword">new</span> <span class="title class_">ClientCredentialsTokenHandler</span>());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>验证通过后应用服务器会接受到包含token的一个json数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;access_token&quot;: &quot;23e003b5e4b9b7eda228b845532d8336&quot;,</span><br><span class="line">&quot;refresh_token&quot;: &quot;d6b49710f398c405a62f31a6676c5830&quot;,</span><br><span class="line">&quot;token_type&quot;: &quot;Bearer&quot;,</span><br><span class="line">&quot;expires_in&quot;: 43199</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个token是有一定的有效期的，在服务端会缓存这个token以便下一次查询，应用客户端也应该保留这个token，访问受限资源时候需要带上这个token去验证身份。<br>比如请求一个API如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -i -X GET \</span><br><span class="line">   -H &quot;Authorization:Bearer 33dbfc80f5659c6fdec73a044ff724c3&quot; \</span><br><span class="line"> &#x27;http://localhost:8090/api/test&#x27;</span><br></pre></td></tr></table></figure><p>资源服务器上使用shiro做安全验证，配置OAuth2对应的realms即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;realms&quot;&gt;</span><br><span class="line">&lt;list&gt;</span><br><span class="line">&lt;bean id=&quot;systemAuthorizingRealm&quot; class=&quot;me.kbiao.example.modules.sys.security.SystemAuthorizingRealm&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;oAuth2Realm&quot; class=&quot;me.kbiao.example..modules.sys.security.OAuth2Realm&quot;/&gt;</span><br><span class="line">&lt;/list&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>在这个reamls中根据token去查到用户信息，再去分发对应的资源。<br>自此便完成了整个oauth2的流程。<br>这个流程中认证服务系统需要配置三张数据表：<br><img src="https://image.kbiao.me/16-7-23/60634523.jpg"></p><ul><li>client_details表中存放注册的客户端数据。如回调地址，授权类型，是否信任，权限信息等</li><li>code中存放发放给客户端应用的code，使用后失效，以保证安全性</li><li>access_token中存放用户信息、客户端和token的对应关系。</li></ul><p>项目是基于Shiro+ALTU实现，参考方案<a href="http://git.oschina.net/mkk/oauth2-shiro">mkk&#x2F;oauth2-shiro - 码云 - 开源中国</a> ，更详细的内容，可以去读读<code>Shengzhao Li</code>开源的代码</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文简单介绍了几种统一认证的解决方案，然后详细介绍了OAuth2的认证流程，并结合实例详细介绍了CODE授权的流程。尽管OAuth2被广泛用于多平台登录解决方案，我觉得在设置cookie、session共享之后也可以被应用于单点登录的解决方案。<br> 在使用Oauth2做前后端分离时遇到的两个跨域问题的解决方案可以参考我的两篇博客</p><ul><li><a href="http://blog.kbiao.me/2016/05/21/CORS%E5%AE%9E%E7%8E%B0%E8%B7%A8%E5%9F%9F%E6%97%B6%E6%8E%88%E6%9D%83%E9%97%AE%E9%A2%98%EF%BC%88401%E9%94%99%E8%AF%AF%EF%BC%89%E7%9A%84%E8%A7%A3%E5%86%B3/">CORS实现跨域时授权问题（401错误）的解决</a></li><li><a href="http://blog.kbiao.me/2016/05/14/Spring%E9%80%9A%E8%BF%87CORS%E5%8D%8F%E8%AE%AE%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/">Spring通过CORS协议解决跨域问题</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.kbiao.me/16-7-23/73340367.jpg?imageView2/2/w/600/interlace/1/&quot;&gt;&lt;br&gt;在一个单位中，可能是存在多个不同的应用，比如学校会有财务的系统会有学生工作的系统，还有图书馆的系统等等，如果每个系统都用独立的账号认证体系，会给用户带来很大困扰，也给管理带来很大不便。所以需要设计一种统一登录的解决方案。比如我登陆了百度账号，进贴吧时发现已经登录了，进糯米发现也自动登录了。常见的有两种情况，一种是SSO（单点登录）效果是一次输入密码多个网站可以识别在线状态；还有一种是多平台登录，效果是可以用一个账号（比如QQ账号）登录多个不同的网站。&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="https://blog.kbiao.me/categories/java/"/>
    
    
    <category term="OAuth2" scheme="https://blog.kbiao.me/tags/OAuth2/"/>
    
    <category term="shiro" scheme="https://blog.kbiao.me/tags/shiro/"/>
    
    <category term="统一认证" scheme="https://blog.kbiao.me/tags/%E7%BB%9F%E4%B8%80%E8%AE%A4%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>我的大学成长手册</title>
    <link href="https://blog.kbiao.me/%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6%E6%88%90%E9%95%BF%E6%89%8B%E5%86%8C-de5fa12e6bfb/"/>
    <id>https://blog.kbiao.me/%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6%E6%88%90%E9%95%BF%E6%89%8B%E5%86%8C-de5fa12e6bfb/</id>
    <published>2016-07-21T06:42:34.000Z</published>
    <updated>2022-05-03T13:52:32.171Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.kbiao.me/myUni.jpg?imageView2/2/w/600/interlace/1/" alt="此处输入图片的描述"><br>今年的新生群我成了群主，即将第三次参与迎新工作。大学四年，三次迎新，也算是圆满了吧。暑期的实训也刚刚结束，基本是大学里的最后一门课程了。接下来就是保研，实习，就业，毕设……大学的收尾工作即将开始。新生群里的人越拉越多，他们憧憬着，也迷茫着即将到来的大学生活，正如三年前的我一样。这个转折点上，我也想回顾一下过去三年的生活，顺便给学弟学妹一份大学漫游指南吧。我觉得我的大学也算精彩。但是，这不是大学的唯一答案。以下仅供参考。<br>分为两部分，第一部分说说我的成长经历，第二部分回答一些被学弟学妹反复问到的问题。</p><span id="more"></span><h2 id="不要迷茫，厘清方向"><a href="#不要迷茫，厘清方向" class="headerlink" title="不要迷茫，厘清方向"></a>不要迷茫，厘清方向</h2><p>我是一个复读生，高中用了四年才到了大学的。很重要的原因是我数学不是很好，第一次高考只考了67。但是我居然达一本线了。复读一年以后，以数学91分（刚刚及格）的成绩来到了现在的大学，一所普通的211。高考成绩出来以后我还是很失落的，毕竟复读了一年，成绩比估分还是要低不少，还是在数学上吃了亏。很显然我没有过人的智商。然后填报志愿来到了这个学院，唯一一个留守老校区的学院。第一次看到学院大门的时候我是迟疑的，有很大的冲动回去再读一年的。我还是留了下来，第一个学期的主要目标就是转专业。我不能换学校，至少我要争取更好的学习环境，和很多刚从高中走出来的同学一样，心不甘，觉得自己再努力一下还可以改变一点什么。心里觉得分数高，就意味着好。接下来遭遇了，报考实验班的失败，转专业的计划只剩下一种可能就是一学年后参加转专业考试，有个前提是成绩要在前两名。</p><p>大学的生活就在这样的背景下铺展开来，和大部分同学一样军训，社团，学生会这些事情迎面扑来，然而我没有太在意，我只是凭借高中玩过的PS基础，加入了学生会宣传部，负责一些宣传海报，日常打杂。然后心里还守着要转专业的目标，努力学习。然后我第一个学期拿到了特等奖学金。我发现我喜欢上了我这个专业，喜欢上了我在学生会的工作，顺便还遇上了喜欢的人。<br>这一段时间的经历，现在看来，经验就是多做点事情，多努力一下总是没错的。很多时候我们的生活不是完全由自己的努力可以决定。我们成长的环境给了我们基础条件，而这个条件每个人都是不一样的，所以并没有一样的起跑线，很多时候出发就是不公平的了。没有显赫的家世，父母不会给你第三只眼睛替你看到更远的未来，我的父母只是小学毕业的生意人；自己没有过人的天资，不可能随随便便进入理想的环境，轻而易举地获得成功，我参加两次高考；我只能选择第三种方案。不知道方向，多做点事情去找到方向，不知道未来，多努力点去争取。天资不够勤来补，家世不好勤来补，走过一个又一个弯路，追赶一个又一个机遇，累并快乐着。当你没有方向时候，问问自己尝试过了吗？努力过了吗？我很庆幸我因为想转专业这样一个目标，让我不断努力，阴错阳差地给我带来了意外的成长。<strong>不要怕犯错误，不要停下脚步</strong><br><img src="https://image.kbiao.me/intelcup.JPG?imageView2/2/w/600/interlace/1/" alt="此处输入图片的描述"></p><h2 id="保持兴趣，保持热爱"><a href="#保持兴趣，保持热爱" class="headerlink" title="保持兴趣，保持热爱"></a>保持兴趣，保持热爱</h2><p>我从大一下学期开始，喜欢上了专业，喜欢上了现在的生活，不再纠结转专业。因为热爱所以才有了接下来的事情。专业方面我开始自学安卓，参加比赛看到了除了教科书以外，这个专业真正有意思的地方。选择专业的时候我并不是很了解这个专业，而且多次数学的不理想，我选择的专业大多是管理类的，也就是偏文科方向的。来了这，冥冥之中就是老天的安排吧，毕竟是最后一个专业志愿。高中就有丰富的折腾手机的经验，玩过第一代智能手机，对编程有一些概念。但是教科书上的却总是枯燥的语法，一个学期结束只能在黑乎乎的命令行窗口里运行一些小程序，和理想中的软件差距还是比较大的。所以就开始自己找资料学习，当发现自己写的东西可以在手机上运行起来给别人看的时候成就感还是蛮大的。这就是我找到了我的兴趣点。<br>兴趣不一定是具体的某一件事情，而是一种让你兴奋的模式。对于我来说，我喜欢过书法，喜欢过读书写作，也喜欢PS，研究过手机电脑，现在专业编程。这些事情都不太一样，但都是我的兴趣。我想他们一定有共通点，否则怎么会让我在做他们的时候感觉到兴奋呢？我想我真正喜欢的是：在一个确定的系统下去创造的感觉，很踏实很爽。什么意思呢？就是一旦掌握了原理，我便可以确定地去完成很多事情的。是一种把想法变成现实的感觉。书法写作会有作品，玩玩PS也可以上学校的工作栏里贴满我的作品。编程更是，计算机是一个确定的系统，根本来讲都是1+1&#x3D;10（二进制）。掌握了语法我便可以创造，让别人看到用到自己的作品是刺激我的兴奋点。所以我很幸运在这个专业里我也找到了我的兴奋点。<br><img src="https://image.kbiao.me/psb.jpg?imageView2/2/w/600/interlace/1/" alt="此处输入图片的描述"><br>这个时候的我写了一篇日志记录我的成长，叫做<a href="http://user.qzone.qq.com/719575079/blog/1396808289?imageView2/2/w/600/interlace/1/">《心想·事成》</a>。因为热爱将热情投入到自己喜欢的事情上，一切就都变得顺利起来了。我享受编程学习中的快乐，享受我设计的海报贴满校园的快乐。</p><h2 id="忙碌不是目的，充实才有意义"><a href="#忙碌不是目的，充实才有意义" class="headerlink" title="忙碌不是目的，充实才有意义"></a>忙碌不是目的，充实才有意义</h2><p>从此我的生活进入了一个正向循环。因为热爱，所以事情顺利，所以有精力去做更多的事情。进入大二的我生活全面铺开。我留在了学生会，成为了宣传部的副部长。这时候我开始理解为什么当时的海报总一次次被打回来修改，我开始有机会和更多的人沟通。我觉得这个很重要，一直以来和我们交流的都是和自己差不多的人，心智水平，年龄，兴趣等，特别是到了大学，三三两两的小团体更是。做学生工作带来的好处就是你必须要和不同的人去交流，下面有部委，上面有部长，老师等等，这些人想法认识很多时候是有很大区别的，在工作中去尝试理解不同的思维模式，这会带来很大的好处。同时学生会有比较好的组织纪律性，形成一种习惯让自己更加积极努力地去做事情。<br><img src="https://image.kbiao.me/classmates.jpg?imageView2/2/w/600/interlace/1/" alt="此处输入图片的描述"><br>我当上了班长，班级的工作其实是有一些郁闷的。开学初我制定了每周一次班委会的规定，希望让班委们多参与到班级工作中来，努力团结，让班级更像班级。但是这个事情我一直在努力，可是做的还是不够好。大学里大家的班集体意识都很弱，人都是三个一群五个一伙的小团体。但是班级的意义在哪里？我觉得是创造一个好的氛围，让我们更高效的完成自己大学的目标。但是大家读大学的目的千差万别，班级这样的组织很难形成共同的愿景目标。这算是我开始在组织管理方面的一些尝试，成效不多但收获蛮大。这也是很多新生需要理解的一点，大学的班级和高中不太一样，不是好班坏班的区分，成绩不是考量一个班级的唯一指标。<br>开始双学位课程。毕竟当初填报志愿一直想着去读管理类的专业，学校的双学位课程给了我机会去完成这个心愿。组织起了自己的小团队，申请了学校的双创训练计划，开始筹划完成自己的一个项目，生活越来越忙。我很少会在宿舍里呆着，总有做不完的事情等着我。我开始考虑<strong>如何安排时间</strong>，如何<strong>协调工作与学习</strong>。以及开始思考学生工作的意义。<br>经过大二的折腾，期末的考试周我要完成别人两倍的考试内容，平时的很多精力没有在学习上，很忙，很累。裸考四级还是过了，六级却没有时间准备去考，现在想来是很后悔的。这个时候我明白了，<strong>忙不等于充实</strong>，充实来自于明白自己忙的意义所在，所以我必须停下来重新规划我的路。<br>这个时候的我写下了又一篇日志<a href="http://user.qzone.qq.com/719575079/blog/1414004278">《凝神静气 继续努力 Keep calm and Carry on》</a><br><img src="https://image.kbiao.me/psb%20%281%29.jpg" alt="此处输入图片的描述"></p><h2 id="进无止境，奋勇向前"><a href="#进无止境，奋勇向前" class="headerlink" title="进无止境，奋勇向前"></a>进无止境，奋勇向前</h2><p>大二的经历，我有专业学习，双学位努力，科研训练，还有一个国家级比赛，以及学生工作的不断成长，大二的我确实忙到爆炸。现在想来，大二的生活给我的意义是我做了足够多的尝试，尝试了大学生活的各种可能性，让我明白自己的长处与不足，让我找到自己真正喜欢的事情。确实是，当我们怀疑某个事情是否适合自己的时候，一定要问问自己去尝试了么，去努力了么？就像学数学，可以从1数到9，要数10的时候，觉得复杂度好高，因此觉得数学不适合自己，这是不对的，其实这个时候连数学的门都没有入。浅尝辄止，贸然拒绝一种可能性是不好的做法。特别是对很多像我一样，没有足够的眼界把人生规划向后推进五年十年的人。<br>大三的我，继续留在了学生会，做了学生会主席。这是非常纠结的一个选择，本来我想收敛目标去学习，但又总觉得不甘心，感谢学长和老师的信任，我从一个副部长，直接做了主席，这给我巨大的挑战。现在回想起来，这个选择不亏。<br>这一切都有个前提是必须清醒的认识到，作为学生的基本职责是学习，成绩一定不能差，事实上我过去的五个学期基本都是特等奖学金，当然有一部分归功于竞赛和学生工作的加分。学生干部和学习冲突吗？必然会冲突，但是学生干部也给了自己以压力和要求，首先自己的成绩要过硬才能去带领自己的团队，你讲的话才会更有说服力；其次只有成绩好，忙的节骨眼上才能无后顾之忧地去努力；而且你不能<strong>抓紧每一分钟去学习，只能抓紧学习的每一分钟</strong>，学习也更有效率。至少在我的学生干部经历中没有投机倒把，职务之便去加分一类的，毕竟特等奖学金大家都会看着你，实实在在需要真本事。<br>学生会的管理中，以我的鸡汤闻名。每次开会时候都会先来半个小时的鸡汤。好听点叫团队建设，事实上正是学生会这个平台才让我能和很多志同道合的伙伴在一块努力去完成一些事情，这个经历对比班级管理就可以看得出。管理学生会给我带来的成长，远远大于班级的。<br><img src="https://image.kbiao.me/qinggesai.jpg" alt="此处输入图片的描述"><br>在学生会也让我站到了更大的舞台上。身处老校区的我们，尽管在综合性的大学，但始终只有我们一个学院在，总是有局限性。当我有机会和三十个学院的主席在一起交流，策划活动去考虑一个学院，甚至一个学校的事情的时候，对我的锻炼确实很大，思考问题的方式也有所改变。看到了更大的世界，内心会少一点傲气。尽管在身边同学看来，我好像大学混的风生水起，但事实上在更大的平台上反而更能看清楚自己的实际模样。<br>大三下学期的时候，我拿到了腾讯面试的机会，结果自然是很惨，然后听说了保研的事情，然后又开始慌慌张张地准备。这个时候又是一个转折，我逐渐的开始认清自己的方向。学生工作，在形成了一定的常规规范后逐渐交给了部长们去做，自己的重心真正收敛到学习上来。从我的经历明显看出来，我并没有用很大的精力去钻研学业，对于考试我是很认真地去准备了，但是真正的功底还不是那么深厚，所以在拿到了面试资格时候，还是被刷的很惨。大学里我做了很多应用方面的事情，这个事情很容易出成果给我带来了成就感，也让别人感觉我很厉害的样子。比如做安卓开发，做WEB，但真正的专业基础课，计算机网络，数据结构算法，操作系统这些课程没有深入掌握，面对更高的要求时候确实是不堪一击的。（说实话，学校的考试还是比较浅的，特别是在有一定的实际项目经验时候，卷面上的东西拿高分不是很困难）。<br>多方面齐头并进，这个学期末我拿到了武汉大学的保研资格，暑期的学习中，我有开始努力补充落下的基本功课，研究算法，数据结构。去尝试更大的项目。一边为九月的保研努力，一边也做着大四的规划。<br>我也不是一个很有理想的人，人生的规划并没有铺设到五年十年之后，跌跌撞撞地去努力。今天的我是过去经历的所有事情的总和，不是因为哪几年事情就一定可以成为今天的我。我没有远见，只是每个阶段不断总结，不断调整方向，然后不停地付诸行动。每一次的坎坷失败都让我看到了更大的世界，激励我不断去努力，去追求。一路走来并不是那么的一帆风顺，总是在不断的纠结挣扎选择中走出一条自己的路。</p><p><img src="https://image.kbiao.me/mydesk.jpg" alt="我的书桌"></p><h2 id="新生问答"><a href="#新生问答" class="headerlink" title="新生问答"></a>新生问答</h2><h3 id="软件工程是学习什么的？"><a href="#软件工程是学习什么的？" class="headerlink" title="软件工程是学习什么的？"></a>软件工程是学习什么的？</h3><p>软件是现在很热门的一个专业，各行各业都需要软件人才。简单点说就是做各种那个电脑上的应用软件，手机里的APP，浏览器里看到的网页的。未来的发展很可能就是俗称程序猿（媛）的一伙人。目前确实是就业挣钱的一个好专业。同时比起金融，从政，制造业这些专业更给了我们相对公平的机会去竞争。<br>本科会学习一些编程的语言，这是我们和计算机打交道的基本途径，学习数据结构算法，操作系统让我们理解这些机器是如何运作的。<br>学校学的知识都是基本功，但我们可以做的事情不只这么多，可以说是目前万金油的一个专业，可以很方便的去到各行各业各种岗位。可以在技术上去发展，成为一名工程师，去实现各种应用软件，想想你手机里的APP，电脑里的QQ，还有玩过的游戏，都有可能自己来实现，做出自己的软件，去百度，腾讯，阿里这样的大公司让你写的代码运行在千万人的设备上，这是很有成就感的事情；也可以在科研这条路上不断前进，研究算法研究网络，去推动计算机行业的发展，也许一下枚更快的CPU有你的贡献，下一代更快的网络你可以去开拓；不喜欢代码也没有关系，有想法凭着大学里的专业知识还可以成为一名产品经理，去设计更好用的软件，去和客户沟通，具体的实现交给程序员们去做，凭着你的专业知识可以更好地和程序员沟通，凭着你的创意更好地服务客户。<br>特别是女生会担心自己是否适合学习这个，总感觉IT行业屌丝男聚集的地方。其实不是，女生可以选择做前端，就是去做各种漂亮的网站（学习HTML,CSS,JS）,也可以做凭借自己的细致去做软件测试，就是帮程序员找软件的问题修复BUG。当然凭借着计算机的思维方式，在其他领域也很容易有所成就，软件可以融入各行各业之中。<br>这个专业知识更新很快，需要自己有自学的能力，需要自己做好持续学习的准备。学校的老师们只能教授一些基本理论，也就是基本上不会变化的知识。而这个行业的上层都在发生着日新月异的变化，想要学好就绝对不能满足于课堂和校园。</p><p>推荐读书<a href="https://www.amazon.cn/%E6%9E%84%E5%BB%BA%E4%B9%8B%E6%B3%95-%E7%8E%B0%E4%BB%A3%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E9%82%B9%E6%AC%A3/dp/B011LPUAYI/ref=sr_1_1?ie=UTF8&qid=1469072551&sr=8-1&keywords=%E6%9E%84%E5%BB%BA%E4%B9%8B%E6%B3%95">《构建之法》</a>。</p><h3 id="如何选购电脑-？"><a href="#如何选购电脑-？" class="headerlink" title="如何选购电脑 ？"></a>如何选购电脑 ？</h3><p>能力承受范围内最好的。<br>首先这个专业不会对你的电脑有什么特别的要求，没有电脑还有机房可以使用。有电脑总是比较方便的，大一开始就会有编程语言的专业课，所以最好一开始就准备电脑。至于配置，就看钱喽。学习过程中并不会有什么特别要求的配置是普通笔记本达不到。但是总归是日后吃饭的工具，朝夕相处的伙伴，用好的学习的过程会更愉快一点。配置一般也没关系，你又更多机会去折腾，折腾也是学习的过程。现在阿里腾讯的云计算资源都有学生优惠，按理来说只要有屏幕能上网基本上都可以解决问题。这也对你的学习能力提出了更高要求。<br>如果要推荐的话，个人喜欢Thinkpad的X系列和Dell的XPS，一个好用一个好看。至于mac，千万别买AIR，学习这个不是用来当花瓶的。而且我们教学体系下大多是微软系的东西，windows会方便一些。其他的话，只要你不把钱花在显卡上问题都不大，不然买回来不玩玩游戏总觉得在浪费钱，玩了就是浪费时间。</p><h3 id="关于数学和英语"><a href="#关于数学和英语" class="headerlink" title="关于数学和英语"></a>关于数学和英语</h3><p>英语很重要很重要。学好英语会给你带来更多的机会，也会让你在专业上走的更顺利。毕竟不能指望完全中文写代码（别说易语言），而且不能把你的每一个工具都汉化，这么做意义也不大。四六级一定要过，到时候想要读研，英语不好是神坑。（我的六级低分飘过都觉得吃亏）<br>数学是基本功，完成专业学习不会有太高的要求，但是想在这个专业里面发展，扎实的数学功底是必须的。毕竟科班出生的我们和培训机构速成的学员是有区别的。学好数学还有数学建模，ACM等等竞赛会打开你新世界的大门。</p><h3 id="关于大学生活"><a href="#关于大学生活" class="headerlink" title="关于大学生活"></a>关于大学生活</h3><p>学习只是大学生活的一部分，成绩好只是大学生活的及格线。<br>大一我做家教挣到回家机票的钱；暑假参加三下乡社会实践，体验不一样的生活；大二暑假参加了两个实习，一个学校的项目到印度学习；大三准备保研的同时，在学校网络中心做一些工作，兼职一些外包基本不用和家里拿钱。同时我也做了多个学生干部的工作，综合能力得到锻炼。（起码来学校招聘的几家公司，我都比较容易地过了）<br>做兼职的话，可以考虑做家教，对大一的同学来说可能是性价比比较高的，辅导初中和高中的同学，收入不会差，需求也比较大。但是会占用比较多的时间。大二专业课各方面的事情比较多，不太建议做太多兼职。兼职用来提前接触一下社会，锻炼下自己的本领就可以了。在家庭经济状况不是很紧张的情况下，不要太过投入，大学主要还是学习的。大三开始有一定专业基础以后可以尝试去做一些外包项目，去小公司实习，或者参与老师的科研，这些都会有一定的报酬，主要是可以通过专业技能赚钱带来的成就感和满足感会很强，能力提高也快。其他的发传单，做服务生，买卖小商品这些和专业距离较远或者体力劳动的工作不是很推荐长期从事，体验一下就好。其实好好学习专业，大三养活自己不是大问题，目前为止对我们专业人才的需求还是比较大的。<br>大学之大在于我可以做大多我想做的事情。我的同学们有学霸、学神，也有工作狂人，有社交达人，还有张罗自己店铺的小老板们。我的老师们不小心被我发现都是藏得很深的大师。我们学校的图书馆居然还是有那么多的宝贝。当发现面前铺了好多条路可以走，这才觉得大学挺大的。<br>不像高中一样，你既定的路线只是上大学，来了大学，你又很多的选择，要学会自己做决定，走自己想走的路。</p><h3 id="开学前做什么"><a href="#开学前做什么" class="headerlink" title="开学前做什么"></a>开学前做什么</h3><p>多了解自己的专业，争取找到自己的兴趣点。兴趣绝对是很重要的。我觉得我比较好的一点就是大一下开始就找到了专业学习的感觉，而很多同学大三了还在纠结自己是否适合这个专业。<br>学会去慕课学习。推荐网站<a href="http://www.imooc.com/">慕课网(IMOOC)-国内最大的IT技能学习平台</a> 。<br>更重要的是调整好一个来大学学习的心态，这是一个全新的开始。只要大家进入了同一个校园，和你高考成绩的关系就不太大了。大学里没有绝对的好、坏、对、错，成绩不是唯一的标准，更多的是自己的选择，要好好把握。</p><h3 id="关于校园网，宿舍，空调等硬件条件"><a href="#关于校园网，宿舍，空调等硬件条件" class="headerlink" title="关于校园网，宿舍，空调等硬件条件"></a>关于校园网，宿舍，空调等硬件条件</h3><p>这是加分项不是必选项。我们看到校园网很慢的时候，其实他还有很大的作用是连接图书馆数据库，这些资源也是你的，有数不尽的专业文献而且这都是免费的，让你不用再百度文库里纠结下载券。你喜欢他的时候这些都不是问题，你不喜欢他这些都是大问题。一叶障目，不见泰山。都是自己心里的感觉而已，调节心态比改变环境容易，也更重要。毕竟我们学院在市区，呆久了你会爱上这里。</p><h3 id="大学里要不要谈恋爱？"><a href="#大学里要不要谈恋爱？" class="headerlink" title="大学里要不要谈恋爱？"></a>大学里要不要谈恋爱？</h3><p>我有意避开了我成长中和恋爱有关的部分，但我相信我一路走来相对顺利和找到了一位合适的青春同路人有很大的关系，互相促进，共同成长这是非常幸运的状态。遇到合适的人，是有一些偶然，所以有机会专门写一篇来讲讲我对感情问题的认识。大学谈恋爱，我觉得是有必要的。<br><img src="https://image.kbiao.me/lover.jpg" alt="此处输入图片的描述"></p><h3 id="关于读研"><a href="#关于读研" class="headerlink" title="关于读研"></a>关于读研</h3><p>我们学校的保研指标是统一的，想保研努力提高啊绩点总是没错的。由于专业特色，大部分同学会选择就业，就业时比较容易，待遇也不低。想要读研继续深造，我们的学长们都去了比较不错的学校（985乃至全国前几的大学都有），还有不少出国深造的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.kbiao.me/myUni.jpg?imageView2/2/w/600/interlace/1/&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;br&gt;今年的新生群我成了群主，即将第三次参与迎新工作。大学四年，三次迎新，也算是圆满了吧。暑期的实训也刚刚结束，基本是大学里的最后一门课程了。接下来就是保研，实习，就业，毕设……大学的收尾工作即将开始。新生群里的人越拉越多，他们憧憬着，也迷茫着即将到来的大学生活，正如三年前的我一样。这个转折点上，我也想回顾一下过去三年的生活，顺便给学弟学妹一份大学漫游指南吧。我觉得我的大学也算精彩。但是，这不是大学的唯一答案。以下仅供参考。&lt;br&gt;分为两部分，第一部分说说我的成长经历，第二部分回答一些被学弟学妹反复问到的问题。&lt;/p&gt;</summary>
    
    
    
    <category term="大学生活" scheme="https://blog.kbiao.me/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB/"/>
    
    <category term="新生" scheme="https://blog.kbiao.me/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB/%E6%96%B0%E7%94%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>CORS实现跨域时授权问题（401错误）的解决</title>
    <link href="https://blog.kbiao.me/CORS%E5%AE%9E%E7%8E%B0%E8%B7%A8%E5%9F%9F%E6%97%B6%E6%8E%88%E6%9D%83%E9%97%AE%E9%A2%98%EF%BC%88401%E9%94%99%E8%AF%AF%EF%BC%89%E7%9A%84%E8%A7%A3%E5%86%B3-e460ee12b01e/"/>
    <id>https://blog.kbiao.me/CORS%E5%AE%9E%E7%8E%B0%E8%B7%A8%E5%9F%9F%E6%97%B6%E6%8E%88%E6%9D%83%E9%97%AE%E9%A2%98%EF%BC%88401%E9%94%99%E8%AF%AF%EF%BC%89%E7%9A%84%E8%A7%A3%E5%86%B3-e460ee12b01e/</id>
    <published>2016-05-20T17:54:32.000Z</published>
    <updated>2022-05-03T11:31:58.909Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.kbiao.me/16-5-21/64423504.jpg"></p><h2 id="问题的提出"><a href="#问题的提出" class="headerlink" title="问题的提出"></a>问题的提出</h2><p>如果我们访问的资源是不需要授权的，也就是在HTTP请求头中不包含<code>authentication</code>头那么以上做法就足够了。但是如果该资源是需要权限验证的，那么这个时候跨域请求的预检测**<code>option</code>请求，由于不会携带身份信息而被拒绝**。浏览器会报出401错误。<span id="more"></span><br>前几天的文章<a href="http://blog.kbiao.me/2016/05/14/Spring%E9%80%9A%E8%BF%87CORS%E5%8D%8F%E8%AE%AE%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/">Spring通过CORS协议解决跨域问题</a> 中提到了如何解决跨域问题的基本思路,解决了跨域请求时浏览器403错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Response to preflight request doesn&#x27;t pass access control check:</span><br><span class="line">No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource.</span><br><span class="line">Origin &#x27;null&#x27; is therefore not allowed access. </span><br><span class="line">The response had HTTP status code 403</span><br><span class="line">401错误信息如下：</span><br></pre></td></tr></table></figure><p>Failed to load resource:<br>the server responded with a status of 401 (Unauthorized)<br>XMLHttpRequest cannot load <a href="http://localhost/api/test">http://localhost/api/test</a>.<br>Response for preflight has invalid HTTP status code 401</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">既然知道了问题的原因，答案也就很容易得出：**对需要进行跨域请求的资源（api），当服务端检测到是`OPTONS`请求时候统统放行，给出HTTP.OK(200)的状态和必要的响应头，哪怕它是不带身份信息的**。</span><br><span class="line">这个问题既可以通过编写对应的后端代码实现，也可以通过设置服务器配置文件实现。也就是如何设置响应头和返回200状态码的办法了。</span><br><span class="line"></span><br><span class="line">## Spring+Shrio的解决方案</span><br><span class="line"></span><br><span class="line">shiro中可以在自己实现的身份验证filter中加入以下代码：</span><br><span class="line">```java</span><br><span class="line">  @Override</span><br><span class="line">    protected boolean preHandle(ServletRequest servletRequest, ServletResponse servletResponse) throws Exception &#123;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) servletResponse;</span><br><span class="line">        if(request.getMethod().equals(RequestMethod.OPTIONS.name()))</span><br><span class="line">        &#123;</span><br><span class="line">            response.setStatus(HttpStatus.OK.value());</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return super.preHandle(request, response);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>shiro中AccessControlFilter提供了访问控制的基础功能；比如是否允许访问&#x2F;当访问拒绝时如何处理等，也是我们一般自定义权限验证时候的一个父类，我们通过重写他的<code>onPreHandle</code>方法判断是否是<code>option</code>请求，如果是则设置相应状态，（响应头已经在<a href="http://blog.kbiao.me/2016/05/14/Spring%E9%80%9A%E8%BF%87CORS%E5%8D%8F%E8%AE%AE%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/">之前文章</a>中通过filter配置过了）返回false表示该拦截器实例已经处理了，将直接返回即可。</p><h2 id="Tomcat配置"><a href="#Tomcat配置" class="headerlink" title="Tomcat配置"></a>Tomcat配置</h2><p>需要修改tomcat的全局web.xml文件在<code>CATALINA_HOME/conf</code>下，加入以下配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CorsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.catalina.filters.CorsFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CorsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;GET,OPTIONS,PUT,DELETE&#x27; always;</span><br><span class="line">add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27; always;</span><br><span class="line">add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;$http_origin&#x27; always;</span><br><span class="line">add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;Authorization,DNT,User-Agent,Keep-Alive,Content-Type,accept,origin,X-Requested-With&#x27; always;</span><br><span class="line"></span><br><span class="line">if ($request_method = OPTIONS ) &#123;</span><br><span class="line">    return 200;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Apache配置"><a href="#Apache配置" class="headerlink" title="Apache配置"></a>Apache配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Header always set Access-Control-Allow-Origin &quot;http://waffle&quot;</span><br><span class="line">Header always set Access-Control-Allow-Methods &quot;POST, GET, OPTIONS&quot;</span><br><span class="line">Header always set Access-Control-Allow-Credentials &quot;true&quot;</span><br><span class="line">Header always set Access-Control-Allow-Headers &quot;Authorization,DNT,User-Agent,Keep-Alive,Content-Type,accept,origin,X-Requested-With&quot;</span><br><span class="line"></span><br><span class="line">RewriteCond %&#123;REQUEST_METHOD&#125; OPTIONS</span><br><span class="line">RewriteRule ^(.*)$ $1 [R=200,L]</span><br></pre></td></tr></table></figure><h2 id="js请求示例"><a href="#js请求示例" class="headerlink" title="js请求示例"></a>js请求示例</h2><p>请求时候需要加上<code>Authorization </code>和<code>Content-Type</code>头。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$http(&#123;</span><br><span class="line">  method: &#x27;POST&#x27;,</span><br><span class="line">  url: scope.webdav.url,</span><br><span class="line">  withCredentials: true,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    Authorization: &#x27;Basic &#x27; + btoa(user + &#x27;:&#x27; + password),</span><br><span class="line">    &#x27;Content-Type&#x27;: &#x27;application/vnd.google-earth.kml+xml; charset=utf-8&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  data: getKml()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>参考文章：<a href="http://www.jujens.eu/posts/en/2015/Jun/27/webdav-options/">http://www.jujens.eu/posts/en/2015/Jun/27/webdav-options/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.kbiao.me/16-5-21/64423504.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;问题的提出&quot;&gt;&lt;a href=&quot;#问题的提出&quot; class=&quot;headerlink&quot; title=&quot;问题的提出&quot;&gt;&lt;/a&gt;问题的提出&lt;/h2&gt;&lt;p&gt;如果我们访问的资源是不需要授权的，也就是在HTTP请求头中不包含&lt;code&gt;authentication&lt;/code&gt;头那么以上做法就足够了。但是如果该资源是需要权限验证的，那么这个时候跨域请求的预检测**&lt;code&gt;option&lt;/code&gt;请求，由于不会携带身份信息而被拒绝**。浏览器会报出401错误。</summary>
    
    
    
    <category term="Coding-Notes" scheme="https://blog.kbiao.me/categories/Coding-Notes/"/>
    
    
    <category term="CORS" scheme="https://blog.kbiao.me/tags/CORS/"/>
    
    <category term="Spring" scheme="https://blog.kbiao.me/tags/Spring/"/>
    
    <category term="java web" scheme="https://blog.kbiao.me/tags/java-web/"/>
    
  </entry>
  
  <entry>
    <title>Spring通过CORS协议解决跨域问题</title>
    <link href="https://blog.kbiao.me/Spring%E9%80%9A%E8%BF%87CORS%E5%8D%8F%E8%AE%AE%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98-8ff59635b5f0/"/>
    <id>https://blog.kbiao.me/Spring%E9%80%9A%E8%BF%87CORS%E5%8D%8F%E8%AE%AE%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98-8ff59635b5f0/</id>
    <published>2016-05-14T15:17:41.000Z</published>
    <updated>2022-05-03T11:31:58.910Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.kbiao.me/16-5-15/23272345.jpg"><br>现在接手学校网络中心的一个项目，根据团队成员的实际情况以及开发需要，老师希望做到前后端完全分离。后台使用java提供restful API 作为核心，前台无论PC或者移动端可以共用一个核心。前期解决了哦oauth2，作为授权机制等问题，本以为大业将成。（最近打算详细介绍一下机遇Spring sercurity 实现oauth2的解决方案）结果又出现了一个跨域问题，让我们踩了一个大坑，记录在此，以绝后患。</p><span id="more"></span><p><strong>错误信息如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Response to preflight request doesn&#x27;t pass access control check: No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource. Origin &#x27;null&#x27; is therefore not allowed access. The response had HTTP status code 403.</span><br></pre></td></tr></table></figure><p>CORS实现跨域时授权问题（401错误）的解决]<a href="http://blog.kbiao.me/2016/05/21/CORS%E5%AE%9E%E7%8E%B0%E8%B7%A8%E5%9F%9F%E6%97%B6%E6%8E%88%E6%9D%83%E9%97%AE%E9%A2%98%EF%BC%88401%E9%94%99%E8%AF%AF%EF%BC%89%E7%9A%84%E8%A7%A3%E5%86%B3/">4</a>   由于授权而产生的403错误解决方案见此。</p><h2 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h2><p>简单的说即为浏览器限制访问A站点下的js代码对B站点下的url进行ajax请求。比如说，前端域名是<a href="http://www.abc.com,那么在当前环境中运行的js代码,出于安全考虑,访问www.xyz.com域名下的资源,是受到限制的.现代浏览器默认都会基于安全原因而阻止跨域的ajax请求,这是现代浏览器中必备的功能,但是往往给开发带来不便.特别是对我这样后台开发人员来讲,这个事情简直神奇./">www.abc.com，那么在当前环境中运行的js代码，出于安全考虑，访问www.xyz.com域名下的资源，是受到限制的。现代浏览器默认都会基于安全原因而阻止跨域的ajax请求，这是现代浏览器中必备的功能，但是往往给开发带来不便。特别是对我这样后台开发人员来讲，这个事情简直神奇。</a><br>但跨域的需求却一直都在，为了跨域，勤劳勇敢的程序猿们想出了许许多多的方法，例如，jsonP、代理文件等等。但这些做法增加了许多不必要的维护成本，而且应用场景也有许多限制，例如jsonP并非XHR，所以jsonP只能使用GET传递参数。更详细的资料可以看这里<a href="http://blog.csdn.net/fangaoxin/article/details/6929415"> Web应用跨域访问解决方案汇总</a></p><h2 id="CORS协议"><a href="#CORS协议" class="headerlink" title="CORS协议"></a>CORS协议</h2><p>如今的JS大有一统天下的趋势，浏览器已经成了大多应用最好的安身之所。哪怕在移动端也有各种Hybird方案，在本地文件系统的Web页面，也有需要获取外部数据的需求，而这些需求也必然是跨域的。在寻找跨域解决方案时，发现了最优雅解决方案就是HTML5来带了的“Cross-Origin Resource Sharing”的新特性，来赋予开发者权力决定资源是否允许被跨域访问。<br>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。<br>它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。<br>为什么说它优雅呢？<br>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。<br>因此，实现CORS通信的关键是服务器。<strong>只要服务器实现了CORS接口</strong>，就可以跨源通信。<br>解决这个问题的关键就落在了我这个负责后台的程序猿身上。<br>看看文档也不是什么难事嘛，就是需要在http头中设置Access-Control-Allow-Origin来决定需要允许哪些站点来访问。关于CROS协议更详细内容参考<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html">跨域资源共享 CORS 详解</a></p><h2 id="CORS常见header"><a href="#CORS常见header" class="headerlink" title="CORS常见header"></a>CORS常见header</h2><p>CORS具有以下常见的header</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http://kbiao.me  </span><br><span class="line"></span><br><span class="line">Access-Control-Max-Age: 3628800</span><br><span class="line"></span><br><span class="line">Access-Control-Allow-Methods: GET，PUT, DELETE</span><br><span class="line"></span><br><span class="line">Access-Control-Allow-Headers: content-type</span><br></pre></td></tr></table></figure><p>“Access-Control-Allow-Origin”表明它允许” <a href="http://kbiao.me/">http://kbiao.me</a>  “发起跨域请求</p><p>“Access-Control-Max-Age”表明在3628800秒内，不需要再发送<em>预检验</em>请求，可以缓存该结果（上面的资料上我们知道CROS协议中，一个AJAX请求被分成了第一步的<code>OPTION</code>预检测请求和正式请求）</p><p>“Access-Control-Allow-Methods”表明它允许GET、PUT、DELETE的外域请求</p><p>“Access-Control-Allow-Headers”表明它允许跨域请求包含content-type头</p><p>当然在处理这个问题的时候前端也有不少坑，特别是Chrome浏览器不允许localhost的跨域请求，详细方案见我项目中负责前端解决方案的小伙伴。<code>假装有链接</code></p><h2 id="常规解决方案"><a href="#常规解决方案" class="headerlink" title="常规解决方案"></a>常规解决方案</h2><p>知道了问题的原因，也知道了配套的解决办法，现在就让我们来实现解决。思路很简单，当前端要请求跨域资源时候，我们给它加上响应的响应头即可。很显然我们自己定义一个过滤器是最简单不过了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by kangb on 2016/5/10.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myCORSFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line">        <span class="type">String</span> <span class="variable">origin</span> <span class="operator">=</span> (String) servletRequest.getRemoteHost()+<span class="string">&quot;:&quot;</span>+servletRequest.getRemotePort();</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;POST, GET, OPTIONS, DELETE&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Max-Age&quot;</span>, <span class="string">&quot;3600&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;x-requested-with,Authorization&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Component 是Spring的注解，关键部分在doFilter中，添加了我们需要的头，<code>option</code>是预检测需要所以需要允许，<code>Authorization</code>是做了oauth2登录响应所必须的，<code>Access-Control-Allow-Credentials</code>表示允许cookies。都是根据自己项目的实际需要配置。<br>再配置Web.xml使得过滤器生效</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>cors<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>·CLASS_PATH·.myeCORSFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>cors<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/api/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来前端就可以像往常一样使用AJAX请求获得资源了，完全不需要做出什么改变。</p><h2 id="SPRING-4中更优雅的办法"><a href="#SPRING-4中更优雅的办法" class="headerlink" title="SPRING 4中更优雅的办法"></a>SPRING 4中更优雅的办法</h2><p>SpringMVC4提供了非常方便的实现跨域的方法。在requestMapping中使用注解。<br><code>@CrossOrigin(origins = “http://kbiao.me”)</code><br>全局实现 .定义类继承WebMvcConfigurerAdapter,设置跨域相关的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfigurerAdapter</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurerAdapter</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    registry.addMapping(<span class="string">&quot;/api/*&quot;</span>).allowedOrigins(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将该类注入到容器中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.tmall.wireless.angel.web.config.CorsConfigurerAdapter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更详细的内容参考Spring 官方的hello world案例<a href="http://spring.io/guides/gs/rest-service-cors/">Enabling Cross Origin Requests for a RESTful Web Service</a>     </p><p><a href="http://spring.io/guides/gs/rest-service-cors/%E6%88%96%E8%80%85%E4%BD%BF%E7%94%A8git%E4%B8%8B%E8%BD%BD%E7%A4%BA%E4%BE%8B%E6%BA%90%E7%A0%81">http://spring.io/guides/gs/rest-service-cors/或者使用git下载示例源码</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/spring-guides/gs-rest-service-cors.git</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.kbiao.me/16-5-15/23272345.jpg&quot;&gt;&lt;br&gt;现在接手学校网络中心的一个项目，根据团队成员的实际情况以及开发需要，老师希望做到前后端完全分离。后台使用java提供restful API 作为核心，前台无论PC或者移动端可以共用一个核心。前期解决了哦oauth2，作为授权机制等问题，本以为大业将成。（最近打算详细介绍一下机遇Spring sercurity 实现oauth2的解决方案）结果又出现了一个跨域问题，让我们踩了一个大坑，记录在此，以绝后患。&lt;/p&gt;</summary>
    
    
    
    <category term="Coding-Notes" scheme="https://blog.kbiao.me/categories/Coding-Notes/"/>
    
    
    <category term="CORS" scheme="https://blog.kbiao.me/tags/CORS/"/>
    
    <category term="spring" scheme="https://blog.kbiao.me/tags/spring/"/>
    
    <category term="java" scheme="https://blog.kbiao.me/tags/java/"/>
    
    <category term="跨域" scheme="https://blog.kbiao.me/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>nodeJS踩坑-记本地地址127.0.0.1与0.0.0.0的区别</title>
    <link href="https://blog.kbiao.me/nodeJS%E8%B8%A9%E5%9D%91-%E8%AE%B0%E6%9C%AC%E5%9C%B0%E5%9C%B0%E5%9D%80127-0-0-1%E4%B8%8E0-0-0-0%E7%9A%84%E5%8C%BA%E5%88%AB-58e1062e389a/"/>
    <id>https://blog.kbiao.me/nodeJS%E8%B8%A9%E5%9D%91-%E8%AE%B0%E6%9C%AC%E5%9C%B0%E5%9C%B0%E5%9D%80127-0-0-1%E4%B8%8E0-0-0-0%E7%9A%84%E5%8C%BA%E5%88%AB-58e1062e389a/</id>
    <published>2016-05-11T13:55:31.000Z</published>
    <updated>2022-05-03T11:31:58.911Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.kbiao.me/16-5-11/42548547.jpg"><br><em>注：本文和Node.js本身关系不大，只是这个这个知识点由学习Node时候引出，主要是关于网络的一个小知识点</em></p><span id="more"></span><h2 id="问题的提出"><a href="#问题的提出" class="headerlink" title="问题的提出"></a>问题的提出</h2><p>nodejs中创建web服务时，作为小白的我自然是跟着官网文档走起</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span>&#125;);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;Hello World\n&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">1337</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://127.0.0.1:1337/&#x27;</span>);</span><br></pre></td></tr></table></figure><p>然后很自然本地就可以用<code>localhost</code>或者<code>127.0.0.1</code>访问了。那我想用本机ip访问呢？那就再<code>listen(192.168.1.10)</code> <code>listen(localhost)</code>啥的吧？结果却不行。我再挂到服务器上想要通过ip访问？怎么也访问不成功。<br>开始觉得是不是端口问题，设置了半天云主机的防火墙啥的还是没有用。果然太年轻，一开始就把问题方向搞错了。</p><h2 id="问题的基本解决"><a href="#问题的基本解决" class="headerlink" title="问题的基本解决"></a>问题的基本解决</h2><p>看看官网的文档有这么一句：</p><blockquote><p>server.listen(port, [hostname], [backlog], [callback])#<br>Begin accepting connections on the specified port and hostname. If the hostname is omitted, the server will accept connections directed to any IPv4 address (INADDR_ANY).</p></blockquote><p>意思就是说如果不填写主机名<code>hostname</code>字段，默认是监听<code>INADDR_ANY</code>，也就是任意的IPv4地址。<br>所以解决这个问题就很简单了直接<code>listen(1337)</code>或者<code>listen(1337,&#39;0.0.0.0&#39;)</code>就可以了。<br>这个0.0.0.0也就是所谓的<code>INADDR_ANY</code><br>问题是解决了可是这个知识点还要进一步理清。</p><h2 id="127-0-0-1与0-0-0-0"><a href="#127-0-0-1与0-0-0-0" class="headerlink" title="127.0.0.1与0.0.0.0"></a>127.0.0.1与0.0.0.0</h2><p>127.0.0.1是一个回送地址，指本地机，一般用来测试使用。大家常用来ping 127.0.0.1来看本地ip&#x2F;tcp正不正常，如能ping通即可正常使用。对于大多数习惯用localhost的来说，实质上就是指向127.0.0.1这个本地IP地址。在操作系统中有个配置文件将localhost与127.0.0.1绑定在了一起。可以理解为本地主机的意思。<br>这个知识点应该是没有什么问题的。其实不只有127.0.0.1，<code>127.x.x.x</code>都是本机回送地址（Loopback Address）,只不过在系统配置中把localhost和<code>127.0.0.1</code>做了绑定，我们习惯用它而已。那么这个<code>INADDR_ANY</code>又是什么呢？</p><h3 id="INADDR-ANY"><a href="#INADDR-ANY" class="headerlink" title="INADDR_ANY"></a>INADDR_ANY</h3><p>这个也叫通配地址，也就是说它不单单指本机。<br>0.0.0.0&#x2F;8可以表示本网络中的所有主机<br>0.0.0.0&#x2F;32可以用作本机的源地址<br>0.0.0.0&#x2F;8也可表示本网络上的某个特定主机<br>综合起来可以说0.0.0.0表示整个网络<br>忽然想起来上计算机网络课程的时候有个默认路由的设置：</p><blockquote><p>在路由器配置中可用0.0.0.0&#x2F;0表示默认路由，作用是帮助路由器发送路由表中无法查询的包。如果设置了全零网络的路由，路由表中无法查询的包都将送到全零网络的路由中去。</p></blockquote><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>在我们刚刚nodejs配置web服务的语境下。0.0.0.0可以表示所有可以访问的地址，也就是本机的所有IPv4地址。</p><p>基础知识还是要扎实掌握才好，不然不会为了这么一点东西而大费周章。也让我想起了在腾讯面试中被问起的ICP四次回收过程，改日写博客详细记录。希望通过博客的点点滴滴助力我更扎实的成长。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.kbiao.me/16-5-11/42548547.jpg&quot;&gt;&lt;br&gt;&lt;em&gt;注：本文和Node.js本身关系不大，只是这个这个知识点由学习Node时候引出，主要是关于网络的一个小知识点&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Coding-Notes" scheme="https://blog.kbiao.me/categories/Coding-Notes/"/>
    
    
    <category term="node.js" scheme="https://blog.kbiao.me/tags/node-js/"/>
    
    <category term="计算机网络" scheme="https://blog.kbiao.me/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>谁说这些东西只有程序员才能玩</title>
    <link href="https://blog.kbiao.me/%E8%B0%81%E8%AF%B4%E8%BF%99%E4%BA%9B%E4%B8%9C%E8%A5%BF%E5%8F%AA%E6%9C%89%E7%A8%8B%E5%BA%8F%E5%91%98%E6%89%8D%E8%83%BD%E7%8E%A9-27b1d0104012/"/>
    <id>https://blog.kbiao.me/%E8%B0%81%E8%AF%B4%E8%BF%99%E4%BA%9B%E4%B8%9C%E8%A5%BF%E5%8F%AA%E6%9C%89%E7%A8%8B%E5%BA%8F%E5%91%98%E6%89%8D%E8%83%BD%E7%8E%A9-27b1d0104012/</id>
    <published>2016-05-10T08:00:27.000Z</published>
    <updated>2022-05-03T13:52:26.624Z</updated>
    
    <content type="html"><![CDATA[<hr><p>其实程序员都是一帮懒人，于是他们创造了各种懒人神器。<br>刚刚开始写博客，发了些文章让家人亲戚看到了，本着对我的关心和支持都转发关注点赞了。然而我知道，他们大部人都不知道我在说什么。所以想写一点，大家都可以看懂又不失逼格的。</p><!--  more--><p>我决定介绍下我使用的工具。一个叫GitHub，一个叫MarkDown。写代码可能不是每个人都需要，但是写点东西每个用电脑的人都或多或少有点需求。这两个东西，都可以用来帮助我们更高效的写作。<br>你说你不写作？作业你总有需要交电子稿的时候吧？！给领导汇报材料总得折腾下Word吧？！<br>这两个工具的使用可以达到<code>文理工医并重，产学用研结合</code>的神奇效果。（我的南大，我骄傲）</p><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p>一张图说明gitHub是什么？全球最大的同性交友网站。<br><img src="https://image.kbiao.me/16-5-10/14771996.jpg" alt="github"></p><p>不会真的信了吧？其实它确实是一帮程序员日常搞基的天堂。可以理解为程序员的微博或者朋友圈，他们不晒自拍晒代码。<br>那然后呢？不写代码的用它来干啥？一般人可以用它来干嘛？<br><img src="https://image.kbiao.me/16-5-10/84260051.jpg"><br>GitHub背后其实有个叫Git的东西，他是用来做版本控制的工具。写论文，一稿、二稿地改，每次改了啥，电脑里备份了一堆文件，找的时候是不是很头大。git就是一个时光机可以随时把文件带回历史的某个版本。程序员用来让代码服服帖帖，普通人当然也可以用它来管理各种文档啦。</p><h3 id="注册安装"><a href="#注册安装" class="headerlink" title="注册安装"></a>注册安装</h3><p>这要讲么？ <a href="http://github.com/">http://github.com</a>  像注册QQ号一样注册一个账号。<br>然后命令行看的头大的话还可以装一个桌面客户端嘛。程序员哥哥们想的还是很周全的。</p><h3 id="创建笔记本"><a href="#创建笔记本" class="headerlink" title="创建笔记本"></a>创建笔记本</h3><p>注册以后登录，你可以看到一个大大的首页</p><dl><dt><img src="https://image.kbiao.me/16-5-10/446648.jpg"><br>人家说的很清楚嘛，学习使用gitHub是不需要你懂代码的。有个按钮叫<code>New respository</code>  可以把它理解成新建文件夹，创建笔记本。<br>进入自己的笔记本以后有这么几个地方要看看：<br><img src="https://image.kbiao.me/16-5-10/43843159.jpg"><br><em>CODE</em></dt><dd>这个页面把它当成文件管理器好了</dd></dl><dl><dt><em>FORK</em></dt><dd>看到好东西可以一键偷回来</dd></dl><dl><dt><em>STAR</em></dt><dd>俗称点赞</dd></dl><dl><dt><em>WATCH</em></dt><dd>俗称关注</dd></dl><dl><dt><em>DOWNLOAD ZIP</em></dt><dd>一键下载，旁边有下载链接</dd></dl><p>怎么有点像朋友圈加百度网盘的混合体呢？是可以这么理解的。用它来当<strong>免费网盘</strong>其实也是不错的。<br>刚刚不是下载了个客户端么，登录上去，把自己刚刚创建的笔记本<code>CLONE</code>回来，也就是下载回来。<br>其实，我是没有下载客户端的……因为我一般都是一句命令（需要安装一个git环境）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:kbiao/kbiao.github.io.git</span><br></pre></td></tr></table></figure><p>进入刚刚下载回来的文件夹，然后你就可以开始自由的写东西了。写完以后，添加一句描述，然后<code>commit</code>，就是告诉它我修改了东西了，并记住我改了啥，要上传就要用<code>push</code>，它就跑到网上去了，可以理解成上传文件了。<br>这些功能客户端都有相应按钮，也可以潇洒地用一句命令搞定。为啥要分两步呢？因为突然有一天你发现改了半天还不如之前的，想退回去，那就去看看<code>history</code>，然后乘坐时光机<code>roll back</code>回去任意时刻。<br>好像还是没有感觉他有什么好用的地方，要是你在和别的小伙伴一起写东西呢？它可以在自己电脑上<code>clone</code>这个文件夹，然后修改完成后<code>commit</code>+<code>push</code>。你这里再来一句<code>pull</code>就可以两个人愉快地合作了。pull的时候发现远程和自己本地不一样，可以很清晰地看到区别，自由决定增加删除还是合并。<br>基本概念就是这样，先入门嘛，上面还有很多不明白的按钮以后用到了一查就知道喽，我写文章的目的只是介绍下还有这么好用的工具，没有见识过呢。想学习高级用法，可以看看这本书《Pro Git》<a href="http://iissnan.com/progit/index.html%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%9C%A8%E5%85%B7%E4%BD%93%E4%BD%BF%E7%94%A8%E7%9A%84%E6%97%B6%E5%80%99%E7%99%BE%E5%BA%A6%EF%BC%8C%E8%B0%B7%E6%AD%8C%E4%B8%80%E4%B8%8B%E3%80%82%E8%BF%99%E4%BA%9B%E6%95%99%E7%A8%8B%E7%9C%9F%E6%98%AF%E4%B8%80%E6%8A%93%E4%B8%80%E5%A4%A7%E6%8A%8A%EF%BC%8C%E4%B8%8D%E6%87%82%E4%BA%86%E5%86%8D%E6%89%BE%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%91%98%E5%A4%A7%E5%93%A5%E9%97%AE%E9%97%AE%E5%91%97%E3%80%82">http://iissnan.com/progit/index.html，也可以在具体使用的时候百度，谷歌一下。这些教程真是一抓一大把，不懂了再找个程序员大哥问问呗。</a><br>程序员当然用它做的最多的事情就是代码管理了，非程序员用gitHub做什么呢？</p><ol><li>写书。多人协作创作，或者用来版本管理。<a href="https://www.gitbook.com/">https://www.gitbook.com/</a></li><li>写博客。我的博客就是在github上搭建的，<strong>阅读原文</strong>可以看看教程。拥有一个自己的域名，自己的动手搭建博客还是很酷炫的。<a href="https://hexo.io/">https://hexo.io/</a></li><li>写简历。各个大公司都有活跃在gitHub.可以用它自动生成酷炫的简历<a href="http://resume.github.io/">http://resume.github.io/</a></li><li>好多国家的政府文件都已经托管到这里来了。</li><li>·····每天逛逛，一帮程序员总会折腾出一些好玩的东西来的。</li></ol><h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><p>刚刚创建gitHub项目的时候会看到它默认有个叫<code>readme.md</code>的文件。其实它就是一个支持Markdown语法的文本文件。</p><h3 id="Markdown是什么？"><a href="#Markdown是什么？" class="headerlink" title="Markdown是什么？"></a>Markdown是什么？</h3><p>Markdown 是一种「标记语言」，通常为程序员群体所用。但是好东西绝不是只有程序员可以用的。可以简单地理解成用来排版的语言，写过专业论文的同学应该知道<code>LeTex</code>这个东西吧。</p><h3 id="Markdown有什么好处？"><a href="#Markdown有什么好处？" class="headerlink" title="Markdown有什么好处？"></a>Markdown有什么好处？</h3><ul><li>语法简单 </li><li>再也不用专注排版 </li><li>兼容html </li><li>可以有更多更大的用处</li></ul><dl><dt>语法简单</dt><dd>Markdown 语法相当简单，哪怕你是一个从没接触过的小白，一天甚至半天就可以上手。</dd></dl><dl><dt>再也不用专注排版</dt><dd>word排版双学位的毕业论文，折腾的我够呛。莫名其妙的多一页少一页，页码不连续，目录调不好，简直要哭。发给老师还要考虑是07，03，还是13版本。用了markdown，程序员创造了各种工具自用转换各种格式，好好写作，排版事情它来做。</dd></dl><dl><dt>兼容html</dt><dd>Markdown 可以方便的转成 html，而且甚至直接兼容 html 语法，真是酷毙了！<br><img src="https://image.kbiao.me/16-5-10/77787373.jpg"></dd></dl><h3 id="更多更大的用处"><a href="#更多更大的用处" class="headerlink" title="更多更大的用处"></a>更多更大的用处</h3><ol><li><p>我的博客写作就是纯 Markdown 写作的，写完以后发布就成了现在看到的样式。</p></li><li><p>很多项目的开发文档就是用markdown写的。</p></li><li><p>兼顾了「什么人都能打开」和「样式」。Markdown 就是纯文本，就是 txt，所以什么人都能打开。然后配合各种工具，生成简历PPT都不是什么问题。</p></li></ol><h3 id="学习和使用"><a href="#学习和使用" class="headerlink" title="学习和使用"></a>学习和使用</h3><p>我很喜欢作业部落的编辑器 <a href="https://www.zybuluo.com/">https://www.zybuluo.com/</a><br>打开以后就可以看到语法教程和在线编辑器，还可以到处同步。甚至支持复杂的公式，流程图和图表。<br>文科的同学可能更喜欢简书，我上面的截图就来自简书。<a href="http://www.jianshu.com/">http://www.jianshu.com/</a></p><p>最近在折腾博客嘛，所以这两个工具都和写作有关。书写也和大多数人有关，希望文章可以帮助到大家。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;其实程序员都是一帮懒人，于是他们创造了各种懒人神器。&lt;br&gt;刚刚开始写博客，发了些文章让家人亲戚看到了，本着对我的关心和支持都转发关注点赞了。然而我知道，他们大部人都不知道我在说什么。所以想写一点，大家都可以看懂又不失逼格的。&lt;/p&gt;
&lt;!--  more--&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Git配置多账号登录</title>
    <link href="https://blog.kbiao.me/Git%E9%85%8D%E7%BD%AE%E5%A4%9A%E8%B4%A6%E5%8F%B7%E7%99%BB%E5%BD%95-4e3b1b4a716e/"/>
    <id>https://blog.kbiao.me/Git%E9%85%8D%E7%BD%AE%E5%A4%9A%E8%B4%A6%E5%8F%B7%E7%99%BB%E5%BD%95-4e3b1b4a716e/</id>
    <published>2016-05-09T05:06:16.000Z</published>
    <updated>2022-05-03T11:31:58.910Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.kbiao.me/16-5-9/93479104.jpg"></p><h2 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h2><p>在公司里做项目，一般都是公司直接分配git账号。而我自己在GitHub上也托管了自己的博客。两边使用的账号是不同的对应的ssh key也不一样。每次都手工更改是很麻烦的，也不是程序员应有的解决方案。这里我记录下我是如何解决git多账号登录的。</p><span id="more"></span><h2 id="取消git全局设置"><a href="#取消git全局设置" class="headerlink" title="取消git全局设置"></a>取消git全局设置</h2><p>学艺不精的我们都是跟着网上的教程进行的git设置，默认都是全局设置，比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;your_name&quot;</span></span><br><span class="line"></span><br><span class="line">git config --global user.email  <span class="string">&quot;your_email&quot;</span></span><br></pre></td></tr></table></figure><p>一般情况下，参与的项目都是同一个邮箱用户名是没啥问题的。但是碰到我这种情况，又不想换掉其中一个项目的用户名（我也没有这个决定权）。我就需要针对不同的项目设置不同的用户名邮箱。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/you project   <span class="comment">#进入项目文件夹</span></span><br><span class="line">git init           <span class="comment">#初始化项目（如果已经是git目录了则不需要）</span></span><br><span class="line">git config user.name <span class="string">&quot;your_name&quot;</span>   <span class="comment">#重新设置用户名和邮箱</span></span><br><span class="line">git config user.email <span class="string">&quot;your_email&quot;</span></span><br></pre></td></tr></table></figure><p>说白了，也就是进入到你的git项目相对根目录下，然后执行git config设置记录。<br>这时候我们打开项目中的<code>.git</code>文件夹，查看<code>config</code>文件会发现多了两行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[branch &quot;master&quot;]</span><br><span class="line">remote = origin</span><br><span class="line">merge = refs/heads/master</span><br><span class="line">[user]</span><br><span class="line">name = you name</span><br><span class="line">email = youemail@host.com</span><br></pre></td></tr></table></figure><p>在下一次提交的时候就优先是用项目文件中的git配置信息了。如果有必要可以执行取消全局设置的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> user.name</span><br><span class="line">git config --global --<span class="built_in">unset</span> user.email</span><br></pre></td></tr></table></figure><h2 id="SSH配置"><a href="#SSH配置" class="headerlink" title="SSH配置"></a>SSH配置</h2><p>邮箱不同也会对应不同的SSH key，所以要针对不同的项目使用不同的key。<br>所以打开git全局配置文件。一般在用户目录下的<code>.ssh</code>文件夹中。比如windows用户就是：<code>C:\Users\用户名\.ssh</code><br>Linux就是<code>～/.ssh</code><br>找到config文件。没有就新建一个，用文本编辑器打开，添加如下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#第一个git项目账号</span><br><span class="line">Host first     #给这个项目服务器起个名字，待会用到</span><br><span class="line">HostName test.com #这里需要用真实的项目检出hostname，为了项目安全，我这里随意写的</span><br><span class="line">User A           #用户名</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_first #该项目ssh key 所在路径</span><br><span class="line"></span><br><span class="line">#第二个git项目账号  和上面的项目配置一样</span><br><span class="line">Host second</span><br><span class="line">HostName test2.com</span><br><span class="line">Port 1334</span><br><span class="line">User B</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_second</span><br></pre></td></tr></table></figure><p>如果还没有生成ssh key 可以用一下命令生成,不同项目起不同名字或者放到不同路径，在上面的config配置中应用不同路径即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -C &quot;your_email&quot; -t rsa</span><br></pre></td></tr></table></figure><h2 id="使配置生效"><a href="#使配置生效" class="headerlink" title="使配置生效"></a>使配置生效</h2><p>上面配置了ssh key时候指定了host名称，所以再次打开项目文件夹下的<code>.git</code>目录下的config文件，修改url配置，把原来的host name url 改成你上面配置的host 值比如 ‘first’ 、’seceond’等，类似如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">url = git@first:A/proxy.git</span><br><span class="line">fetch = +refs/heads/*:refs/remotes/origin/*</span><br></pre></td></tr></table></figure><p>也可以使用命令行完成配置。这里需要注意，使用.ssh目录下的host代替真实的hostname，这样才能让git识别出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add first git@first:A/project.git</span><br></pre></td></tr></table></figure><p>如果使用的是repo，也是同样操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repo init -u ssh://A@first -b branch</span><br></pre></td></tr></table></figure><p>push的时候，push到对应的Host即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push fist master  #first项目中： </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.kbiao.me/16-5-9/93479104.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;问题提出&quot;&gt;&lt;a href=&quot;#问题提出&quot; class=&quot;headerlink&quot; title=&quot;问题提出&quot;&gt;&lt;/a&gt;问题提出&lt;/h2&gt;&lt;p&gt;在公司里做项目，一般都是公司直接分配git账号。而我自己在GitHub上也托管了自己的博客。两边使用的账号是不同的对应的ssh key也不一样。每次都手工更改是很麻烦的，也不是程序员应有的解决方案。这里我记录下我是如何解决git多账号登录的。&lt;/p&gt;</summary>
    
    
    
    <category term="Coding-Notes" scheme="https://blog.kbiao.me/categories/Coding-Notes/"/>
    
    
    <category term="git" scheme="https://blog.kbiao.me/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Java-Convert-List-to-Array</title>
    <link href="https://blog.kbiao.me/Java-Convert-List-To-Array-24935f750060/"/>
    <id>https://blog.kbiao.me/Java-Convert-List-To-Array-24935f750060/</id>
    <published>2016-05-06T16:21:45.000Z</published>
    <updated>2022-05-03T11:31:58.910Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.kbiao.me/16-5-7/67479954.jpg"></p><h2 id="问题的提出"><a href="#问题的提出" class="headerlink" title="问题的提出"></a>问题的提出</h2><p>今天在完成一个小功能的时候，需要把存放在List中的数据转化成字符串数组。<br>想当然地用了<code>List</code>的一个方法<code>toArray()</code>,它的返回值是<code>Object[]</code>类型，于是用强制类型转换。代码如下： </p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] getDictValueList(String type)&#123; </span><br><span class="line"><span class="type">List</span> <span class="variable">DictList</span> <span class="operator">=</span> getDictList(type); </span><br><span class="line"><span class="type">List</span> <span class="variable">DictValue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); </span><br><span class="line"><span class="keyword">for</span> (Dict dict : DictList)&#123; </span><br><span class="line">DictValue.add(dict.getLabel()); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> (String[])DictValue.toArray(); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>结果它报错了<code>Ljava.lang.Object; cannot be cast to [Ljava.lang.String;</code><br>这个错误看起来有点奇怪，不知道前面的L和半个方括号是什么意思。 </p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><blockquote><p>类型不匹配。</p></blockquote><p><code>toArray()</code>是一个抽象方法，返回Object[]类型,没有泛型，无法强转成String[]类型。要想让它返回对应的类型可以使用它的重载方法：<code> T[] toArray(T[] a);</code> </p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol><li>List转换成为数组。（这里的List是实体是ArrayList)                调用<code>ArrayList</code>的<code>toArray</code>方法。<br><code>public T[] toArray(T[]a)</code>返回一个按照正确的顺序包含此列表中所有元素的数组；返回数组的运行时类型就是指定数组的运行时类型。如果列表能放入指定的数组，则返回放入此列表元素的数组。否则，将根据指定数组的运行时类型和此列表的大小分配一个新的数组。 所以我以上的返回代码修改为：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> DictValue.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[DictList.size()]);</span><br></pre></td></tr></table></figure><ol start="2"><li>数组转换成为List<br>调用<code>Arrays</code>的 <code>asList</code>方法<br><code>.public static List asList(T... a)</code><br>返回一个受指定数组支持的固定大小的列表。（对返回列表的更改会“直写”到数组。）此方法同 Collection.toArray 一起，充当了基于数组的 API 与基于 collection 的 API 之间的桥梁。 此方法还提供了一个创建固定长度的列表的便捷方法，该列表被初始化为包含多个元素：<br><code>List stooges = Arrays.asList(&quot;Larry&quot;, &quot;Moe&quot;, &quot;Curly&quot;); </code><br>具体用法: <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[] arr = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>&#125;; <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> Arrays.asList(arr); </span><br></pre></td></tr></table></figure>一个错误，两个知识点。好好学习，天天向上。<br>作者： K_Biao<br>链接：<a href="http://www.imooc.com/article/5435">http://www.imooc.com/article/5435</a><br>来源：慕课网</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.kbiao.me/16-5-7/67479954.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;问题的提出&quot;&gt;&lt;a href=&quot;#问题的提出&quot; class=&quot;headerlink&quot; title=&quot;问题的提出&quot;&gt;&lt;/a&gt;问题的提出&lt;/h2&gt;&lt;p&gt;今天在完成一个小功能的时候，需要把存放在List中的数据转化成字符串数组。&lt;br&gt;想当然地用了&lt;code&gt;List&lt;/code&gt;的一个方法&lt;code&gt;toArray()&lt;/code&gt;,它的返回值是&lt;code&gt;Object[]&lt;/code&gt;类型，于是用强制类型转换。代码如下： &lt;/p&gt;</summary>
    
    
    
    <category term="Coding-Notes" scheme="https://blog.kbiao.me/categories/Coding-Notes/"/>
    
    
    <category term="java" scheme="https://blog.kbiao.me/tags/java/"/>
    
    <category term="list" scheme="https://blog.kbiao.me/tags/list/"/>
    
  </entry>
  
  <entry>
    <title>Android-MVP-Demo</title>
    <link href="https://blog.kbiao.me/Android-MVP-Demo-be303a8bb542/"/>
    <id>https://blog.kbiao.me/Android-MVP-Demo-be303a8bb542/</id>
    <published>2016-05-06T15:30:11.000Z</published>
    <updated>2022-05-03T11:31:58.909Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://image.kbiao.me/16-5-7/86536240.jpg"><br>写了很多的项目之后会有一种感觉就是好像啥也会点，但是啥也做不出来。缺少实践是学习中的一个致命弱点。最近做一个室内WIFI定位的项目，实践中需要一个可以收集环境中wifi信号强度的工具。<span id="more"></span>需求很简单，读取wifi信号，并且上传指定服务器。这个很快就做出来了。后来又说这个wifi信号不及时，需要定时刷新，一秒钟之内多取样，我就继续改。后来又说信号强度需要排序，还需要记录位点，还需要客户端收到服务器的反馈……需求越来越多，然后经常是改一个功能就会出现莫名其妙的闪退或者其他bug。很是心烦。所以就想到了重构一遍整个代码。一个能投入实际应用的工具不能只是把以前学习过的demo的累加，更需要一种科学的构建方式。所以边学习了MVP，边实践了一次。</p><p>以下是修改前后的项目模式结构对比：<br><code>修改前</code><br><img src="https://image.kbiao.me/16-5-6/71782982.jpg" alt="修改前"><br><code>修改后</code><br><img src="https://image.kbiao.me/16-5-6/3836095.jpg" alt="修改后"><br>明显感觉到文件变多了了，但是结构更清晰了。对于这样一个完全没有注释的项目，时隔一月再次拿起，说是需要添加学习模式，增加位点判断等。很快便完成而且不影响之前的任何设置。便深刻地感受到了这种模式的好处。</p><h2 id="什么是MVP："><a href="#什么是MVP：" class="headerlink" title="什么是MVP："></a>什么是MVP：</h2><blockquote><p>随着UI创建技术的功能日益增强，UI层也履行着越来越多的职责。为了更好地细分视图(View)与模型(Model)的功能，让View专注于处理数据的可视化以及与用户的交互，同时让Model只关系数据的处理，基于MVC概念的MVP(Model-View-Presenter)模式应运而生。</p></blockquote><p>在MVP模式里通常包含4个要素：</p><ol><li>View:负责绘制UI元素、与用户进行交互(在Android中体现为Activity);</li><li>View interface:需要View实现的接口，View通过View interface与Presenter进行交互，降低耦合，方便进行单元测试;</li><li>Model:负责存储、检索、操纵数据(有时也实现一个Model interface用来降低耦合);</li><li>Presenter:作为View与Model交互的中间纽带，处理与用户交互的负责逻辑。</li></ol><p>也许我们经常听到的是MVC，这也是一种非常成熟的设计模式。在桌面应用，web应用中很常见，也方便我们理解，它实现了数据、界面、逻辑的分离。</p><h2 id="MVP-与-MVC"><a href="#MVP-与-MVC" class="headerlink" title="MVP 与 MVC"></a>MVP 与 MVC</h2><blockquote><p>MVP<br>是从经典的模式MVC演变而来，它们的基本思想有相通的地方：Controller&#x2F;Presenter负责逻辑的处理，Model提供数据，View负<br>责显示。作为一种新的模式，MVP与MVC有着一个重大的区别：在MVP中View并不直接使用Model，它们之间的通信是通过Presenter<br>(MVC中的Controller)来进行的，所有的交互都发生在Presenter内部，而在MVC中View会从直接Model中读取数据而不是通过<br>Controller。</p><p>在MVC里，View是可以直接访问Model的！从而，View里会包含Model信息，不可避免的还要包括一些业务逻辑。<br>在MVC模型里，更关注的Model的不变，而同时有多个对Model的不同显示，及View。所以，在MVC模型里，Model不依赖于View，但是<br>View是依赖于Model的。不仅如此，因为有一些业务逻辑在View里实现了，导致要更改View也是比较困难的，至少那些业务逻辑是无法重用的。</p></blockquote><p>我们在学习阶段，写的东西一般都是在Activity中完成，项目复杂了Activity中的代码越来越多，一会不看就不太记得前一个函数发生了什么，特别是执行一些后台任务的时候，与前面界面的交互是比较复杂的。这时候就比较容易理解这种模式直观的一个好处了———这是一个将后台任务和activities&#x2F;views&#x2F;fragment分离的方法，让它们独立于绝大多数跟生命周期相关的事件。这样应用就会变得更简单。当你需要写一个Activity，Fragment或者一个自定义View的时候，你可以将所有和后台任务相关的方法放在一个外部的或者静态的类中。这样你的后台任务就不会再与Activity相关联，不会在泄漏内存同时也不会依赖于Activity的重建。<br>同时也提供了更为清晰的项目结构，不同部分分别负责不通的工作也为测试提供了方便。</p><h2 id="MVP实例"><a href="#MVP实例" class="headerlink" title="MVP实例"></a>MVP实例</h2><p>下面我就以项目中的具体一部分来说明如何使用这样的项目结构<br>项目的基本需求是收集附近的wifi信号信息，这里只展示把获得的wifi信号表示出来的部分。<br><code>效果图</code><br><img src="https://image.kbiao.me/16-5-6/32834670.jpg" alt="效果图"></p><h3 id="1-定义模型："><a href="#1-定义模型：" class="headerlink" title="1.定义模型："></a>1.定义模型：</h3><p><code>java</code></p><p>public class WifiScan {</p><pre><code>private ScanResult scanResult;private String tag;public WifiScan(String tag, ScanResult scanResult) &#123;    this.tag = tag;    this.scanResult = scanResult;&#125;public ScanResult getScanResult() &#123;    return scanResult;&#125;public String getTag() &#123;    return tag;&#125;public void setTag(String tag) &#123;    this.tag = tag;&#125;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 2.建立View接口（更新ui中的view状态）</span><br><span class="line">```java</span><br><span class="line">public interface WifiListener &#123;</span><br><span class="line"></span><br><span class="line">abstract Context getContext();</span><br><span class="line"></span><br><span class="line">abstract void handleWifiScan(List&lt;WifiScan&gt; wifiScans);</span><br><span class="line"></span><br><span class="line">abstract void handleWifiTick(long progress, long max);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-建立presenter"><a href="#3-建立presenter" class="headerlink" title="3.建立presenter"></a>3.建立presenter</h3><p>（主导器，通过iView和iModel接口操作model和view），activity可以把所有逻辑给presenter处理，这样java逻辑就从手机的activity中分离出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">WifiPresenter</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">private</span> LinearLayout searching;</span><br><span class="line">       <span class="keyword">private</span> ListView listView;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="title function_">WifiPresenter</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">           <span class="built_in">this</span>.listView = (ListView) rootView.findViewById(android.R.id.list);</span><br><span class="line">           <span class="built_in">this</span>.searching = (LinearLayout) rootView.findViewById(R.id.wifi_searching);</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateSearching</span><span class="params">(<span class="type">boolean</span> listEmpty)</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (listEmpty) &#123;</span><br><span class="line">               <span class="built_in">this</span>.listView.setVisibility(View.GONE);</span><br><span class="line">               <span class="built_in">this</span>.searching.setVisibility(View.VISIBLE);</span><br><span class="line"></span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="built_in">this</span>.listView.setVisibility(View.VISIBLE);</span><br><span class="line">               <span class="built_in">this</span>.searching.setVisibility(View.GONE);</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-在Acitivity中调用-x2F-实现以上类"><a href="#4-在Acitivity中调用-x2F-实现以上类" class="headerlink" title="4.在Acitivity中调用&#x2F;实现以上类"></a>4.在Acitivity中调用&#x2F;实现以上类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WifiDetailFragment</span> <span class="keyword">extends</span> <span class="title class_">ListFragment</span> <span class="keyword">implements</span> <span class="title class_">WifiListener</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*省略一些不重要的代码*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> WifiHandler wifiHandler;</span><br><span class="line">    <span class="keyword">protected</span> WifiAdapter adapter;</span><br><span class="line">    View  rootView;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isInit</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> List&lt;WifiScan&gt; scanResults;</span><br><span class="line">    <span class="keyword">private</span> WifiPresenter presenter;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span><br><span class="line"><span class="params">                             Bundle savedInstanceState)</span> &#123;</span><br><span class="line"></span><br><span class="line">        rootView = inflater.inflate(R.layout.fragment_wifidetail, container, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rootView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doInit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Init scan results</span></span><br><span class="line">        <span class="built_in">this</span>.scanResults = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Init adapter</span></span><br><span class="line">        <span class="built_in">this</span>.adapter = <span class="keyword">new</span> <span class="title class_">WifiAdapter</span>(getContext(), R.layout.wifi_row, <span class="built_in">this</span>.scanResults);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set adapter sort</span></span><br><span class="line">        <span class="built_in">this</span>.adapter.sort(WIFISCAN_COMPARATOR);</span><br><span class="line"></span><br><span class="line">        setListAdapter(<span class="built_in">this</span>.adapter);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Init Wifi handler</span></span><br><span class="line">        <span class="built_in">this</span>.wifiHandler = <span class="keyword">new</span> <span class="title class_">WifiHandler</span>(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Listen to WiFi</span></span><br><span class="line">        <span class="built_in">this</span>.wifiHandler.doWifiListen();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Presenter</span></span><br><span class="line">        <span class="built_in">this</span>.presenter = <span class="keyword">new</span> <span class="title class_">WifiPresenter</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.isInit = <span class="literal">true</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getWifiIcon</span><span class="params">(ScanResult scanResult)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (scanResult.level &gt; WIFI_LEVEL_HIGH) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.drawable.wifi_4;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (scanResult.level &gt; WIFI_LEVEL_MEDIUM) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.drawable.wifi_3;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (scanResult.level &gt; WIFI_LEVEL_LOW) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.drawable.wifi_2;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (scanResult.level &gt; WIFI_LEVEL_LOWEST) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.drawable.wifi_1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> R.drawable.wifi_0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Context <span class="title function_">getContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getActivity().getApplicationContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleWifiScan</span><span class="params">(List&lt;WifiScan&gt; wifiScans)</span> &#123;</span><br><span class="line">        <span class="comment">// Set scan results</span></span><br><span class="line">        <span class="built_in">this</span>.scanResults = wifiScans;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Sort wifi scans</span></span><br><span class="line">        Collections.sort(<span class="built_in">this</span>.scanResults, WIFISCAN_COMPARATOR);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Remove all from adapter</span></span><br><span class="line">        <span class="built_in">this</span>.adapter.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add Scan Result to adapter</span></span><br><span class="line">        <span class="keyword">for</span> (WifiScan scanResult : wifiScans) &#123;</span><br><span class="line">            <span class="built_in">this</span>.adapter.add(scanResult);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update searching</span></span><br><span class="line">        <span class="built_in">this</span>.presenter.updateSearching(<span class="built_in">this</span>.adapter.isEmpty());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Notify data change</span></span><br><span class="line">        <span class="built_in">this</span>.adapter.notifyDataSetChanged();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleWifiTick</span><span class="params">(<span class="type">long</span> progress, <span class="type">long</span> max)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>MVP主要解决就是把逻辑层抽出来成P层，要是遇到需求逻辑上的更改就可以只需要修改P层了或者遇到逻辑上的大概我们可以直接从写一个P也可以，之前的项目把所有的东西都写在了Activity&#x2F;Fragment里面这样一来遇到频繁改需求或者逻辑越来越复杂的时候，Activity &#x2F;Fragment里面就会出现过多的混杂逻辑导致出错，所以MVP模式对于APP来对控制逻辑和UI的解耦来说是一个不错的选择！</p><h2 id="项目其他页面"><a href="#项目其他页面" class="headerlink" title="项目其他页面"></a>项目其他页面</h2><p><img src="https://image.kbiao.me/16-5-6/56555941.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://image.kbiao.me/16-5-7/86536240.jpg&quot;&gt;&lt;br&gt;写了很多的项目之后会有一种感觉就是好像啥也会点，但是啥也做不出来。缺少实践是学习中的一个致命弱点。最近做一个室内WIFI定位的项目，实践中需要一个可以收集环境中wifi信号强度的工具。</summary>
    
    
    
    <category term="Android" scheme="https://blog.kbiao.me/categories/Android/"/>
    
    
    <category term="Android" scheme="https://blog.kbiao.me/tags/Android/"/>
    
    <category term="MVP" scheme="https://blog.kbiao.me/tags/MVP/"/>
    
    <category term="demo" scheme="https://blog.kbiao.me/tags/demo/"/>
    
  </entry>
  
</feed>
